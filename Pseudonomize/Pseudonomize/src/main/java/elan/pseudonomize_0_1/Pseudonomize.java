// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package elan.pseudonomize_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
import java.io.File;

//the import part of tJava_2
//import java.util.List;

//the import part of tJavaRow_1
import java.util.*;
import java.lang.reflect.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Pseudonomize Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class Pseudonomize implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (folder != null) {

				this.setProperty("folder", folder.toString());

			}

			if (input != null) {

				this.setProperty("input", input.toString());

			}

			if (separator != null) {

				this.setProperty("separator", separator.toString());

			}

			if (header != null) {

				this.setProperty("header", header.toString());

			}

			if (dateFormat != null) {

				this.setProperty("dateFormat", dateFormat.toString());

			}

			if (saveMapping != null) {

				this.setProperty("saveMapping", saveMapping.toString());

			}

		}

		public String folder;

		public String getFolder() {
			return this.folder;
		}

		public String input;

		public String getInput() {
			return this.input;
		}

		public String separator;

		public String getSeparator() {
			return this.separator;
		}

		public String header;

		public String getHeader() {
			return this.header;
		}

		public String dateFormat;

		public String getDateFormat() {
			return this.dateFormat;
		}

		public String saveMapping;

		public String getSaveMapping() {
			return this.saveMapping;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Pseudonomize";
	private final String projectName = "ELAN";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Pseudonomize.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Pseudonomize.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_lookUpIDs_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSetGlobalVar_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("Generating random IDs...");

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class idsStruct implements
			routines.system.IPersistableRow<idsStruct> {
		final static byte[] commonByteArrayLock_ELAN_Pseudonomize = new byte[0];
		static byte[] commonByteArray_ELAN_Pseudonomize = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String pseudo;

		public String getPseudo() {
			return this.pseudo;
		}

		public int id;

		public int getId() {
			return this.id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.pseudo == null) ? 0 : this.pseudo.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final idsStruct other = (idsStruct) obj;

			if (this.pseudo == null) {
				if (other.pseudo != null)
					return false;

			} else if (!this.pseudo.equals(other.pseudo))

				return false;

			return true;
		}

		public void copyDataTo(idsStruct other) {

			other.pseudo = this.pseudo;
			other.id = this.id;

		}

		public void copyKeysDataTo(idsStruct other) {

			other.pseudo = this.pseudo;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ELAN_Pseudonomize.length) {
					if (length < 1024
							&& commonByteArray_ELAN_Pseudonomize.length == 0) {
						commonByteArray_ELAN_Pseudonomize = new byte[1024];
					} else {
						commonByteArray_ELAN_Pseudonomize = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ELAN_Pseudonomize, 0, length);
				strReturn = new String(commonByteArray_ELAN_Pseudonomize, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Pseudonomize) {

				try {

					int length = 0;

					this.pseudo = readString(dis);

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.pseudo, dos);

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("pseudo=" + pseudo);
			sb.append(",id=" + String.valueOf(id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(idsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.pseudo, other.pseudo);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class pseudosStruct implements
			routines.system.IPersistableRow<pseudosStruct> {
		final static byte[] commonByteArrayLock_ELAN_Pseudonomize = new byte[0];
		static byte[] commonByteArray_ELAN_Pseudonomize = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String newColumn2;

		public String getNewColumn2() {
			return this.newColumn2;
		}

		public String newColumn3;

		public String getNewColumn3() {
			return this.newColumn3;
		}

		public String newColumn4;

		public String getNewColumn4() {
			return this.newColumn4;
		}

		public String newColumn5;

		public String getNewColumn5() {
			return this.newColumn5;
		}

		public String newColumn6;

		public String getNewColumn6() {
			return this.newColumn6;
		}

		public String newColumn7;

		public String getNewColumn7() {
			return this.newColumn7;
		}

		public String newColumn8;

		public String getNewColumn8() {
			return this.newColumn8;
		}

		public String newColumn9;

		public String getNewColumn9() {
			return this.newColumn9;
		}

		public String newColumn10;

		public String getNewColumn10() {
			return this.newColumn10;
		}

		public String newColumn11;

		public String getNewColumn11() {
			return this.newColumn11;
		}

		public String newColumn12;

		public String getNewColumn12() {
			return this.newColumn12;
		}

		public String newColumn13;

		public String getNewColumn13() {
			return this.newColumn13;
		}

		public String newColumn14;

		public String getNewColumn14() {
			return this.newColumn14;
		}

		public String newColumn15;

		public String getNewColumn15() {
			return this.newColumn15;
		}

		public String newColumn16;

		public String getNewColumn16() {
			return this.newColumn16;
		}

		public String newColumn17;

		public String getNewColumn17() {
			return this.newColumn17;
		}

		public String newColumn18;

		public String getNewColumn18() {
			return this.newColumn18;
		}

		public String newColumn19;

		public String getNewColumn19() {
			return this.newColumn19;
		}

		public String newColumn20;

		public String getNewColumn20() {
			return this.newColumn20;
		}

		public String newColumn21;

		public String getNewColumn21() {
			return this.newColumn21;
		}

		public String newColumn22;

		public String getNewColumn22() {
			return this.newColumn22;
		}

		public String newColumn23;

		public String getNewColumn23() {
			return this.newColumn23;
		}

		public String newColumn24;

		public String getNewColumn24() {
			return this.newColumn24;
		}

		public String newColumn25;

		public String getNewColumn25() {
			return this.newColumn25;
		}

		public String newColumn26;

		public String getNewColumn26() {
			return this.newColumn26;
		}

		public String newColumn27;

		public String getNewColumn27() {
			return this.newColumn27;
		}

		public String newColumn28;

		public String getNewColumn28() {
			return this.newColumn28;
		}

		public String newColumn29;

		public String getNewColumn29() {
			return this.newColumn29;
		}

		public String newColumn30;

		public String getNewColumn30() {
			return this.newColumn30;
		}

		public String newColumn31;

		public String getNewColumn31() {
			return this.newColumn31;
		}

		public String newColumn32;

		public String getNewColumn32() {
			return this.newColumn32;
		}

		public String newColumn33;

		public String getNewColumn33() {
			return this.newColumn33;
		}

		public String newColumn34;

		public String getNewColumn34() {
			return this.newColumn34;
		}

		public String newColumn35;

		public String getNewColumn35() {
			return this.newColumn35;
		}

		public String newColumn36;

		public String getNewColumn36() {
			return this.newColumn36;
		}

		public String newColumn37;

		public String getNewColumn37() {
			return this.newColumn37;
		}

		public String newColumn38;

		public String getNewColumn38() {
			return this.newColumn38;
		}

		public String newColumn39;

		public String getNewColumn39() {
			return this.newColumn39;
		}

		public String newColumn40;

		public String getNewColumn40() {
			return this.newColumn40;
		}

		public String newColumn41;

		public String getNewColumn41() {
			return this.newColumn41;
		}

		public String newColumn42;

		public String getNewColumn42() {
			return this.newColumn42;
		}

		public String newColumn43;

		public String getNewColumn43() {
			return this.newColumn43;
		}

		public String newColumn44;

		public String getNewColumn44() {
			return this.newColumn44;
		}

		public String newColumn45;

		public String getNewColumn45() {
			return this.newColumn45;
		}

		public String newColumn46;

		public String getNewColumn46() {
			return this.newColumn46;
		}

		public String newColumn47;

		public String getNewColumn47() {
			return this.newColumn47;
		}

		public String newColumn48;

		public String getNewColumn48() {
			return this.newColumn48;
		}

		public String newColumn49;

		public String getNewColumn49() {
			return this.newColumn49;
		}

		public String newColumn50;

		public String getNewColumn50() {
			return this.newColumn50;
		}

		public String newColumn51;

		public String getNewColumn51() {
			return this.newColumn51;
		}

		public String newColumn52;

		public String getNewColumn52() {
			return this.newColumn52;
		}

		public String newColumn53;

		public String getNewColumn53() {
			return this.newColumn53;
		}

		public String newColumn54;

		public String getNewColumn54() {
			return this.newColumn54;
		}

		public String newColumn55;

		public String getNewColumn55() {
			return this.newColumn55;
		}

		public String newColumn56;

		public String getNewColumn56() {
			return this.newColumn56;
		}

		public String newColumn57;

		public String getNewColumn57() {
			return this.newColumn57;
		}

		public String newColumn58;

		public String getNewColumn58() {
			return this.newColumn58;
		}

		public String newColumn59;

		public String getNewColumn59() {
			return this.newColumn59;
		}

		public String newColumn60;

		public String getNewColumn60() {
			return this.newColumn60;
		}

		public String newColumn61;

		public String getNewColumn61() {
			return this.newColumn61;
		}

		public String newColumn62;

		public String getNewColumn62() {
			return this.newColumn62;
		}

		public String newColumn63;

		public String getNewColumn63() {
			return this.newColumn63;
		}

		public String newColumn64;

		public String getNewColumn64() {
			return this.newColumn64;
		}

		public String newColumn65;

		public String getNewColumn65() {
			return this.newColumn65;
		}

		public String newColumn66;

		public String getNewColumn66() {
			return this.newColumn66;
		}

		public String newColumn67;

		public String getNewColumn67() {
			return this.newColumn67;
		}

		public String newColumn68;

		public String getNewColumn68() {
			return this.newColumn68;
		}

		public String newColumn69;

		public String getNewColumn69() {
			return this.newColumn69;
		}

		public String newColumn70;

		public String getNewColumn70() {
			return this.newColumn70;
		}

		public String newColumn71;

		public String getNewColumn71() {
			return this.newColumn71;
		}

		public String newColumn72;

		public String getNewColumn72() {
			return this.newColumn72;
		}

		public String newColumn73;

		public String getNewColumn73() {
			return this.newColumn73;
		}

		public String newColumn74;

		public String getNewColumn74() {
			return this.newColumn74;
		}

		public String newColumn75;

		public String getNewColumn75() {
			return this.newColumn75;
		}

		public String newColumn76;

		public String getNewColumn76() {
			return this.newColumn76;
		}

		public String newColumn77;

		public String getNewColumn77() {
			return this.newColumn77;
		}

		public String newColumn78;

		public String getNewColumn78() {
			return this.newColumn78;
		}

		public String newColumn79;

		public String getNewColumn79() {
			return this.newColumn79;
		}

		public String newColumn80;

		public String getNewColumn80() {
			return this.newColumn80;
		}

		public String newColumn81;

		public String getNewColumn81() {
			return this.newColumn81;
		}

		public String newColumn82;

		public String getNewColumn82() {
			return this.newColumn82;
		}

		public String newColumn83;

		public String getNewColumn83() {
			return this.newColumn83;
		}

		public String newColumn84;

		public String getNewColumn84() {
			return this.newColumn84;
		}

		public String newColumn85;

		public String getNewColumn85() {
			return this.newColumn85;
		}

		public String newColumn86;

		public String getNewColumn86() {
			return this.newColumn86;
		}

		public String newColumn87;

		public String getNewColumn87() {
			return this.newColumn87;
		}

		public String newColumn88;

		public String getNewColumn88() {
			return this.newColumn88;
		}

		public String newColumn89;

		public String getNewColumn89() {
			return this.newColumn89;
		}

		public String newColumn90;

		public String getNewColumn90() {
			return this.newColumn90;
		}

		public String newColumn91;

		public String getNewColumn91() {
			return this.newColumn91;
		}

		public String newColumn92;

		public String getNewColumn92() {
			return this.newColumn92;
		}

		public String newColumn93;

		public String getNewColumn93() {
			return this.newColumn93;
		}

		public String newColumn94;

		public String getNewColumn94() {
			return this.newColumn94;
		}

		public String newColumn95;

		public String getNewColumn95() {
			return this.newColumn95;
		}

		public String newColumn96;

		public String getNewColumn96() {
			return this.newColumn96;
		}

		public String newColumn97;

		public String getNewColumn97() {
			return this.newColumn97;
		}

		public String newColumn98;

		public String getNewColumn98() {
			return this.newColumn98;
		}

		public String newColumn99;

		public String getNewColumn99() {
			return this.newColumn99;
		}

		public String newColumn100;

		public String getNewColumn100() {
			return this.newColumn100;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ELAN_Pseudonomize.length) {
					if (length < 1024
							&& commonByteArray_ELAN_Pseudonomize.length == 0) {
						commonByteArray_ELAN_Pseudonomize = new byte[1024];
					} else {
						commonByteArray_ELAN_Pseudonomize = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ELAN_Pseudonomize, 0, length);
				strReturn = new String(commonByteArray_ELAN_Pseudonomize, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Pseudonomize) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.newColumn1 = readString(dis);

					this.newColumn2 = readString(dis);

					this.newColumn3 = readString(dis);

					this.newColumn4 = readString(dis);

					this.newColumn5 = readString(dis);

					this.newColumn6 = readString(dis);

					this.newColumn7 = readString(dis);

					this.newColumn8 = readString(dis);

					this.newColumn9 = readString(dis);

					this.newColumn10 = readString(dis);

					this.newColumn11 = readString(dis);

					this.newColumn12 = readString(dis);

					this.newColumn13 = readString(dis);

					this.newColumn14 = readString(dis);

					this.newColumn15 = readString(dis);

					this.newColumn16 = readString(dis);

					this.newColumn17 = readString(dis);

					this.newColumn18 = readString(dis);

					this.newColumn19 = readString(dis);

					this.newColumn20 = readString(dis);

					this.newColumn21 = readString(dis);

					this.newColumn22 = readString(dis);

					this.newColumn23 = readString(dis);

					this.newColumn24 = readString(dis);

					this.newColumn25 = readString(dis);

					this.newColumn26 = readString(dis);

					this.newColumn27 = readString(dis);

					this.newColumn28 = readString(dis);

					this.newColumn29 = readString(dis);

					this.newColumn30 = readString(dis);

					this.newColumn31 = readString(dis);

					this.newColumn32 = readString(dis);

					this.newColumn33 = readString(dis);

					this.newColumn34 = readString(dis);

					this.newColumn35 = readString(dis);

					this.newColumn36 = readString(dis);

					this.newColumn37 = readString(dis);

					this.newColumn38 = readString(dis);

					this.newColumn39 = readString(dis);

					this.newColumn40 = readString(dis);

					this.newColumn41 = readString(dis);

					this.newColumn42 = readString(dis);

					this.newColumn43 = readString(dis);

					this.newColumn44 = readString(dis);

					this.newColumn45 = readString(dis);

					this.newColumn46 = readString(dis);

					this.newColumn47 = readString(dis);

					this.newColumn48 = readString(dis);

					this.newColumn49 = readString(dis);

					this.newColumn50 = readString(dis);

					this.newColumn51 = readString(dis);

					this.newColumn52 = readString(dis);

					this.newColumn53 = readString(dis);

					this.newColumn54 = readString(dis);

					this.newColumn55 = readString(dis);

					this.newColumn56 = readString(dis);

					this.newColumn57 = readString(dis);

					this.newColumn58 = readString(dis);

					this.newColumn59 = readString(dis);

					this.newColumn60 = readString(dis);

					this.newColumn61 = readString(dis);

					this.newColumn62 = readString(dis);

					this.newColumn63 = readString(dis);

					this.newColumn64 = readString(dis);

					this.newColumn65 = readString(dis);

					this.newColumn66 = readString(dis);

					this.newColumn67 = readString(dis);

					this.newColumn68 = readString(dis);

					this.newColumn69 = readString(dis);

					this.newColumn70 = readString(dis);

					this.newColumn71 = readString(dis);

					this.newColumn72 = readString(dis);

					this.newColumn73 = readString(dis);

					this.newColumn74 = readString(dis);

					this.newColumn75 = readString(dis);

					this.newColumn76 = readString(dis);

					this.newColumn77 = readString(dis);

					this.newColumn78 = readString(dis);

					this.newColumn79 = readString(dis);

					this.newColumn80 = readString(dis);

					this.newColumn81 = readString(dis);

					this.newColumn82 = readString(dis);

					this.newColumn83 = readString(dis);

					this.newColumn84 = readString(dis);

					this.newColumn85 = readString(dis);

					this.newColumn86 = readString(dis);

					this.newColumn87 = readString(dis);

					this.newColumn88 = readString(dis);

					this.newColumn89 = readString(dis);

					this.newColumn90 = readString(dis);

					this.newColumn91 = readString(dis);

					this.newColumn92 = readString(dis);

					this.newColumn93 = readString(dis);

					this.newColumn94 = readString(dis);

					this.newColumn95 = readString(dis);

					this.newColumn96 = readString(dis);

					this.newColumn97 = readString(dis);

					this.newColumn98 = readString(dis);

					this.newColumn99 = readString(dis);

					this.newColumn100 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.newColumn2, dos);

				// String

				writeString(this.newColumn3, dos);

				// String

				writeString(this.newColumn4, dos);

				// String

				writeString(this.newColumn5, dos);

				// String

				writeString(this.newColumn6, dos);

				// String

				writeString(this.newColumn7, dos);

				// String

				writeString(this.newColumn8, dos);

				// String

				writeString(this.newColumn9, dos);

				// String

				writeString(this.newColumn10, dos);

				// String

				writeString(this.newColumn11, dos);

				// String

				writeString(this.newColumn12, dos);

				// String

				writeString(this.newColumn13, dos);

				// String

				writeString(this.newColumn14, dos);

				// String

				writeString(this.newColumn15, dos);

				// String

				writeString(this.newColumn16, dos);

				// String

				writeString(this.newColumn17, dos);

				// String

				writeString(this.newColumn18, dos);

				// String

				writeString(this.newColumn19, dos);

				// String

				writeString(this.newColumn20, dos);

				// String

				writeString(this.newColumn21, dos);

				// String

				writeString(this.newColumn22, dos);

				// String

				writeString(this.newColumn23, dos);

				// String

				writeString(this.newColumn24, dos);

				// String

				writeString(this.newColumn25, dos);

				// String

				writeString(this.newColumn26, dos);

				// String

				writeString(this.newColumn27, dos);

				// String

				writeString(this.newColumn28, dos);

				// String

				writeString(this.newColumn29, dos);

				// String

				writeString(this.newColumn30, dos);

				// String

				writeString(this.newColumn31, dos);

				// String

				writeString(this.newColumn32, dos);

				// String

				writeString(this.newColumn33, dos);

				// String

				writeString(this.newColumn34, dos);

				// String

				writeString(this.newColumn35, dos);

				// String

				writeString(this.newColumn36, dos);

				// String

				writeString(this.newColumn37, dos);

				// String

				writeString(this.newColumn38, dos);

				// String

				writeString(this.newColumn39, dos);

				// String

				writeString(this.newColumn40, dos);

				// String

				writeString(this.newColumn41, dos);

				// String

				writeString(this.newColumn42, dos);

				// String

				writeString(this.newColumn43, dos);

				// String

				writeString(this.newColumn44, dos);

				// String

				writeString(this.newColumn45, dos);

				// String

				writeString(this.newColumn46, dos);

				// String

				writeString(this.newColumn47, dos);

				// String

				writeString(this.newColumn48, dos);

				// String

				writeString(this.newColumn49, dos);

				// String

				writeString(this.newColumn50, dos);

				// String

				writeString(this.newColumn51, dos);

				// String

				writeString(this.newColumn52, dos);

				// String

				writeString(this.newColumn53, dos);

				// String

				writeString(this.newColumn54, dos);

				// String

				writeString(this.newColumn55, dos);

				// String

				writeString(this.newColumn56, dos);

				// String

				writeString(this.newColumn57, dos);

				// String

				writeString(this.newColumn58, dos);

				// String

				writeString(this.newColumn59, dos);

				// String

				writeString(this.newColumn60, dos);

				// String

				writeString(this.newColumn61, dos);

				// String

				writeString(this.newColumn62, dos);

				// String

				writeString(this.newColumn63, dos);

				// String

				writeString(this.newColumn64, dos);

				// String

				writeString(this.newColumn65, dos);

				// String

				writeString(this.newColumn66, dos);

				// String

				writeString(this.newColumn67, dos);

				// String

				writeString(this.newColumn68, dos);

				// String

				writeString(this.newColumn69, dos);

				// String

				writeString(this.newColumn70, dos);

				// String

				writeString(this.newColumn71, dos);

				// String

				writeString(this.newColumn72, dos);

				// String

				writeString(this.newColumn73, dos);

				// String

				writeString(this.newColumn74, dos);

				// String

				writeString(this.newColumn75, dos);

				// String

				writeString(this.newColumn76, dos);

				// String

				writeString(this.newColumn77, dos);

				// String

				writeString(this.newColumn78, dos);

				// String

				writeString(this.newColumn79, dos);

				// String

				writeString(this.newColumn80, dos);

				// String

				writeString(this.newColumn81, dos);

				// String

				writeString(this.newColumn82, dos);

				// String

				writeString(this.newColumn83, dos);

				// String

				writeString(this.newColumn84, dos);

				// String

				writeString(this.newColumn85, dos);

				// String

				writeString(this.newColumn86, dos);

				// String

				writeString(this.newColumn87, dos);

				// String

				writeString(this.newColumn88, dos);

				// String

				writeString(this.newColumn89, dos);

				// String

				writeString(this.newColumn90, dos);

				// String

				writeString(this.newColumn91, dos);

				// String

				writeString(this.newColumn92, dos);

				// String

				writeString(this.newColumn93, dos);

				// String

				writeString(this.newColumn94, dos);

				// String

				writeString(this.newColumn95, dos);

				// String

				writeString(this.newColumn96, dos);

				// String

				writeString(this.newColumn97, dos);

				// String

				writeString(this.newColumn98, dos);

				// String

				writeString(this.newColumn99, dos);

				// String

				writeString(this.newColumn100, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + newColumn2);
			sb.append(",newColumn3=" + newColumn3);
			sb.append(",newColumn4=" + newColumn4);
			sb.append(",newColumn5=" + newColumn5);
			sb.append(",newColumn6=" + newColumn6);
			sb.append(",newColumn7=" + newColumn7);
			sb.append(",newColumn8=" + newColumn8);
			sb.append(",newColumn9=" + newColumn9);
			sb.append(",newColumn10=" + newColumn10);
			sb.append(",newColumn11=" + newColumn11);
			sb.append(",newColumn12=" + newColumn12);
			sb.append(",newColumn13=" + newColumn13);
			sb.append(",newColumn14=" + newColumn14);
			sb.append(",newColumn15=" + newColumn15);
			sb.append(",newColumn16=" + newColumn16);
			sb.append(",newColumn17=" + newColumn17);
			sb.append(",newColumn18=" + newColumn18);
			sb.append(",newColumn19=" + newColumn19);
			sb.append(",newColumn20=" + newColumn20);
			sb.append(",newColumn21=" + newColumn21);
			sb.append(",newColumn22=" + newColumn22);
			sb.append(",newColumn23=" + newColumn23);
			sb.append(",newColumn24=" + newColumn24);
			sb.append(",newColumn25=" + newColumn25);
			sb.append(",newColumn26=" + newColumn26);
			sb.append(",newColumn27=" + newColumn27);
			sb.append(",newColumn28=" + newColumn28);
			sb.append(",newColumn29=" + newColumn29);
			sb.append(",newColumn30=" + newColumn30);
			sb.append(",newColumn31=" + newColumn31);
			sb.append(",newColumn32=" + newColumn32);
			sb.append(",newColumn33=" + newColumn33);
			sb.append(",newColumn34=" + newColumn34);
			sb.append(",newColumn35=" + newColumn35);
			sb.append(",newColumn36=" + newColumn36);
			sb.append(",newColumn37=" + newColumn37);
			sb.append(",newColumn38=" + newColumn38);
			sb.append(",newColumn39=" + newColumn39);
			sb.append(",newColumn40=" + newColumn40);
			sb.append(",newColumn41=" + newColumn41);
			sb.append(",newColumn42=" + newColumn42);
			sb.append(",newColumn43=" + newColumn43);
			sb.append(",newColumn44=" + newColumn44);
			sb.append(",newColumn45=" + newColumn45);
			sb.append(",newColumn46=" + newColumn46);
			sb.append(",newColumn47=" + newColumn47);
			sb.append(",newColumn48=" + newColumn48);
			sb.append(",newColumn49=" + newColumn49);
			sb.append(",newColumn50=" + newColumn50);
			sb.append(",newColumn51=" + newColumn51);
			sb.append(",newColumn52=" + newColumn52);
			sb.append(",newColumn53=" + newColumn53);
			sb.append(",newColumn54=" + newColumn54);
			sb.append(",newColumn55=" + newColumn55);
			sb.append(",newColumn56=" + newColumn56);
			sb.append(",newColumn57=" + newColumn57);
			sb.append(",newColumn58=" + newColumn58);
			sb.append(",newColumn59=" + newColumn59);
			sb.append(",newColumn60=" + newColumn60);
			sb.append(",newColumn61=" + newColumn61);
			sb.append(",newColumn62=" + newColumn62);
			sb.append(",newColumn63=" + newColumn63);
			sb.append(",newColumn64=" + newColumn64);
			sb.append(",newColumn65=" + newColumn65);
			sb.append(",newColumn66=" + newColumn66);
			sb.append(",newColumn67=" + newColumn67);
			sb.append(",newColumn68=" + newColumn68);
			sb.append(",newColumn69=" + newColumn69);
			sb.append(",newColumn70=" + newColumn70);
			sb.append(",newColumn71=" + newColumn71);
			sb.append(",newColumn72=" + newColumn72);
			sb.append(",newColumn73=" + newColumn73);
			sb.append(",newColumn74=" + newColumn74);
			sb.append(",newColumn75=" + newColumn75);
			sb.append(",newColumn76=" + newColumn76);
			sb.append(",newColumn77=" + newColumn77);
			sb.append(",newColumn78=" + newColumn78);
			sb.append(",newColumn79=" + newColumn79);
			sb.append(",newColumn80=" + newColumn80);
			sb.append(",newColumn81=" + newColumn81);
			sb.append(",newColumn82=" + newColumn82);
			sb.append(",newColumn83=" + newColumn83);
			sb.append(",newColumn84=" + newColumn84);
			sb.append(",newColumn85=" + newColumn85);
			sb.append(",newColumn86=" + newColumn86);
			sb.append(",newColumn87=" + newColumn87);
			sb.append(",newColumn88=" + newColumn88);
			sb.append(",newColumn89=" + newColumn89);
			sb.append(",newColumn90=" + newColumn90);
			sb.append(",newColumn91=" + newColumn91);
			sb.append(",newColumn92=" + newColumn92);
			sb.append(",newColumn93=" + newColumn93);
			sb.append(",newColumn94=" + newColumn94);
			sb.append(",newColumn95=" + newColumn95);
			sb.append(",newColumn96=" + newColumn96);
			sb.append(",newColumn97=" + newColumn97);
			sb.append(",newColumn98=" + newColumn98);
			sb.append(",newColumn99=" + newColumn99);
			sb.append(",newColumn100=" + newColumn100);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pseudosStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				pseudosStruct pseudos = new pseudosStruct();
				idsStruct ids = new idsStruct();

				/**
				 * [tHashOutput_1 begin ] start
				 */

				ok_Hash.put("tHashOutput_1", false);
				start_Hash.put("tHashOutput_1", System.currentTimeMillis());

				currentComponent = "tHashOutput_1";

				int tos_count_tHashOutput_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<idsStruct> tHashFile_tHashOutput_1 = null;
				String hashKey_tHashOutput_1 = "tHashFile_Pseudonomize_" + pid
						+ "_tHashOutput_1";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_1)) {
					if (mf_tHashOutput_1.getResourceMap().get(
							hashKey_tHashOutput_1) == null) {
						mf_tHashOutput_1
								.getResourceMap()
								.put(hashKey_tHashOutput_1,
										new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<idsStruct>(
												org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_1 = mf_tHashOutput_1
								.getResourceMap().get(hashKey_tHashOutput_1);
					} else {
						tHashFile_tHashOutput_1 = mf_tHashOutput_1
								.getResourceMap().get(hashKey_tHashOutput_1);
					}
				}
				int nb_line_tHashOutput_1 = 0;

				/**
				 * [tHashOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					int uniqueNumber;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				idsStruct ids_tmp = new idsStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_1 {

					public void valueToConn_0(
							org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							pseudosStruct pseudos) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_1 = 0;

						columnIndexWithD_tFileInputDelimited_1 = 0;

						pseudos.id = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 1;

						pseudos.newColumn1 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 2;

						pseudos.newColumn2 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 3;

						pseudos.newColumn3 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 4;

						pseudos.newColumn4 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 5;

						pseudos.newColumn5 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 6;

						pseudos.newColumn6 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 7;

						pseudos.newColumn7 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 8;

						pseudos.newColumn8 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 9;

						pseudos.newColumn9 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 10;

						pseudos.newColumn10 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 11;

						pseudos.newColumn11 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 12;

						pseudos.newColumn12 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 13;

						pseudos.newColumn13 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 14;

						pseudos.newColumn14 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 15;

						pseudos.newColumn15 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 16;

						pseudos.newColumn16 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 17;

						pseudos.newColumn17 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 18;

						pseudos.newColumn18 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 19;

						pseudos.newColumn19 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 20;

						pseudos.newColumn20 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 21;

						pseudos.newColumn21 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 22;

						pseudos.newColumn22 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 23;

						pseudos.newColumn23 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 24;

						pseudos.newColumn24 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 25;

						pseudos.newColumn25 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 26;

						pseudos.newColumn26 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 27;

						pseudos.newColumn27 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 28;

						pseudos.newColumn28 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 29;

						pseudos.newColumn29 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 30;

						pseudos.newColumn30 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 31;

						pseudos.newColumn31 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 32;

						pseudos.newColumn32 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 33;

						pseudos.newColumn33 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 34;

						pseudos.newColumn34 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 35;

						pseudos.newColumn35 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 36;

						pseudos.newColumn36 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 37;

						pseudos.newColumn37 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 38;

						pseudos.newColumn38 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 39;

						pseudos.newColumn39 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 40;

						pseudos.newColumn40 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 41;

						pseudos.newColumn41 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 42;

						pseudos.newColumn42 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 43;

						pseudos.newColumn43 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 44;

						pseudos.newColumn44 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 45;

						pseudos.newColumn45 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 46;

						pseudos.newColumn46 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 47;

						pseudos.newColumn47 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 48;

						pseudos.newColumn48 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 49;

						pseudos.newColumn49 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 50;

						pseudos.newColumn50 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 51;

						pseudos.newColumn51 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 52;

						pseudos.newColumn52 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 53;

						pseudos.newColumn53 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 54;

						pseudos.newColumn54 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 55;

						pseudos.newColumn55 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 56;

						pseudos.newColumn56 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 57;

						pseudos.newColumn57 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 58;

						pseudos.newColumn58 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 59;

						pseudos.newColumn59 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 60;

						pseudos.newColumn60 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 61;

						pseudos.newColumn61 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 62;

						pseudos.newColumn62 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 63;

						pseudos.newColumn63 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 64;

						pseudos.newColumn64 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 65;

						pseudos.newColumn65 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 66;

						pseudos.newColumn66 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 67;

						pseudos.newColumn67 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 68;

						pseudos.newColumn68 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 69;

						pseudos.newColumn69 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 70;

						pseudos.newColumn70 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 71;

						pseudos.newColumn71 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 72;

						pseudos.newColumn72 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 73;

						pseudos.newColumn73 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 74;

						pseudos.newColumn74 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 75;

						pseudos.newColumn75 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 76;

						pseudos.newColumn76 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 77;

						pseudos.newColumn77 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 78;

						pseudos.newColumn78 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 79;

						pseudos.newColumn79 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 80;

						pseudos.newColumn80 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 81;

						pseudos.newColumn81 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 82;

						pseudos.newColumn82 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 83;

						pseudos.newColumn83 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 84;

						pseudos.newColumn84 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 85;

						pseudos.newColumn85 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 86;

						pseudos.newColumn86 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 87;

						pseudos.newColumn87 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 88;

						pseudos.newColumn88 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 89;

						pseudos.newColumn89 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 90;

						pseudos.newColumn90 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 91;

						pseudos.newColumn91 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 92;

						pseudos.newColumn92 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 93;

						pseudos.newColumn93 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 94;

						pseudos.newColumn94 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 95;

						pseudos.newColumn95 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 96;

						pseudos.newColumn96 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 97;

						pseudos.newColumn97 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 98;

						pseudos.newColumn98 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 99;

						pseudos.newColumn99 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

					}

					public void valueToConn_1(
							org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							pseudosStruct pseudos) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_1 = 0;

						columnIndexWithD_tFileInputDelimited_1 = 100;

						pseudos.newColumn100 = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

					}

					public void valueToConn(
							org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							pseudosStruct pseudos) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_1, pseudos);

						valueToConn_1(fid_tFileInputDelimited_1, pseudos);

					}

				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1 = new RowHelper_tFileInputDelimited_1();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = (context.folder
							.endsWith(File.separator) ? context.folder
							: context.folder.concat(File.separator))
							.concat(context.input);
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								(context.folder.endsWith(File.separator) ? context.folder
										: context.folder.concat(File.separator))
										.concat(context.input), "UTF-8",
								context.separator == null
										|| context.separator.isEmpty() ? "\t"
										: context.separator, "\n", false,
								(context.header == null || context.header
										.equalsIgnoreCase("Y")) ? 1 : 0, 0, -1,
								-1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						pseudos = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						pseudos = new pseudosStruct();
						try {

							rowHelper_tFileInputDelimited_1.valueToConn(
									fid_tFileInputDelimited_1, pseudos);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							pseudos = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "pseudos"
						if (pseudos != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;
								Var.uniqueNumber = Numeric
										.sequence(
												"id",
												(new Random().nextInt(1001 - 1) + 1),
												1);// ###############################
								// ###############################
								// # Output tables

								ids = null;

								// # Output table : 'ids'
								ids_tmp.pseudo = pseudos.id;
								ids_tmp.id = Var.uniqueNumber;
								ids = ids_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "ids"
							if (ids != null) {

								/**
								 * [tHashOutput_1 main ] start
								 */

								currentComponent = "tHashOutput_1";

								idsStruct oneRow_tHashOutput_1 = new idsStruct();

								oneRow_tHashOutput_1.pseudo = ids.pseudo;
								oneRow_tHashOutput_1.id = ids.id;

								tHashFile_tHashOutput_1
										.put(oneRow_tHashOutput_1);
								nb_line_tHashOutput_1++;

								tos_count_tHashOutput_1++;

								/**
								 * [tHashOutput_1 main ] stop
								 */

							} // End of branch "ids"

						} // End of branch "pseudos"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ((context.folder.endsWith(File.separator) ? context.folder
							: context.folder.concat(File.separator))
							.concat(context.input)) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tHashOutput_1 end ] start
				 */

				currentComponent = "tHashOutput_1";

				globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);

				ok_Hash.put("tHashOutput_1", true);
				end_Hash.put("tHashOutput_1", System.currentTimeMillis());

				/**
				 * [tHashOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tSetGlobalVar_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tHashOutput_1 finally ] start
				 */

				currentComponent = "tHashOutput_1";

				/**
				 * [tHashOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tSetGlobalVar_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 main ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				globalMap.put("days", new Random().nextInt(8 - 1) + 1);
				globalMap.put("calendar", Calendar.getInstance());
				globalMap.put("dateFormat", new SimpleDateFormat(
						context.dateFormat));

				tos_count_tSetGlobalVar_1++;

				/**
				 * [tSetGlobalVar_1 main ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}

	public static class singleColumnRowStruct implements
			routines.system.IPersistableRow<singleColumnRowStruct> {
		final static byte[] commonByteArrayLock_ELAN_Pseudonomize = new byte[0];
		static byte[] commonByteArray_ELAN_Pseudonomize = new byte[0];

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ELAN_Pseudonomize.length) {
					if (length < 1024
							&& commonByteArray_ELAN_Pseudonomize.length == 0) {
						commonByteArray_ELAN_Pseudonomize = new byte[1024];
					} else {
						commonByteArray_ELAN_Pseudonomize = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ELAN_Pseudonomize, 0, length);
				strReturn = new String(commonByteArray_ELAN_Pseudonomize, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Pseudonomize) {

				try {

					int length = 0;

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(singleColumnRowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class nonNullRowsStruct implements
			routines.system.IPersistableRow<nonNullRowsStruct> {
		final static byte[] commonByteArrayLock_ELAN_Pseudonomize = new byte[0];
		static byte[] commonByteArray_ELAN_Pseudonomize = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String newColumn2;

		public String getNewColumn2() {
			return this.newColumn2;
		}

		public String newColumn3;

		public String getNewColumn3() {
			return this.newColumn3;
		}

		public String newColumn4;

		public String getNewColumn4() {
			return this.newColumn4;
		}

		public String newColumn5;

		public String getNewColumn5() {
			return this.newColumn5;
		}

		public String newColumn6;

		public String getNewColumn6() {
			return this.newColumn6;
		}

		public String newColumn7;

		public String getNewColumn7() {
			return this.newColumn7;
		}

		public String newColumn8;

		public String getNewColumn8() {
			return this.newColumn8;
		}

		public String newColumn9;

		public String getNewColumn9() {
			return this.newColumn9;
		}

		public String newColumn10;

		public String getNewColumn10() {
			return this.newColumn10;
		}

		public String newColumn11;

		public String getNewColumn11() {
			return this.newColumn11;
		}

		public String newColumn12;

		public String getNewColumn12() {
			return this.newColumn12;
		}

		public String newColumn13;

		public String getNewColumn13() {
			return this.newColumn13;
		}

		public String newColumn14;

		public String getNewColumn14() {
			return this.newColumn14;
		}

		public String newColumn15;

		public String getNewColumn15() {
			return this.newColumn15;
		}

		public String newColumn16;

		public String getNewColumn16() {
			return this.newColumn16;
		}

		public String newColumn17;

		public String getNewColumn17() {
			return this.newColumn17;
		}

		public String newColumn18;

		public String getNewColumn18() {
			return this.newColumn18;
		}

		public String newColumn19;

		public String getNewColumn19() {
			return this.newColumn19;
		}

		public String newColumn20;

		public String getNewColumn20() {
			return this.newColumn20;
		}

		public String newColumn21;

		public String getNewColumn21() {
			return this.newColumn21;
		}

		public String newColumn22;

		public String getNewColumn22() {
			return this.newColumn22;
		}

		public String newColumn23;

		public String getNewColumn23() {
			return this.newColumn23;
		}

		public String newColumn24;

		public String getNewColumn24() {
			return this.newColumn24;
		}

		public String newColumn25;

		public String getNewColumn25() {
			return this.newColumn25;
		}

		public String newColumn26;

		public String getNewColumn26() {
			return this.newColumn26;
		}

		public String newColumn27;

		public String getNewColumn27() {
			return this.newColumn27;
		}

		public String newColumn28;

		public String getNewColumn28() {
			return this.newColumn28;
		}

		public String newColumn29;

		public String getNewColumn29() {
			return this.newColumn29;
		}

		public String newColumn30;

		public String getNewColumn30() {
			return this.newColumn30;
		}

		public String newColumn31;

		public String getNewColumn31() {
			return this.newColumn31;
		}

		public String newColumn32;

		public String getNewColumn32() {
			return this.newColumn32;
		}

		public String newColumn33;

		public String getNewColumn33() {
			return this.newColumn33;
		}

		public String newColumn34;

		public String getNewColumn34() {
			return this.newColumn34;
		}

		public String newColumn35;

		public String getNewColumn35() {
			return this.newColumn35;
		}

		public String newColumn36;

		public String getNewColumn36() {
			return this.newColumn36;
		}

		public String newColumn37;

		public String getNewColumn37() {
			return this.newColumn37;
		}

		public String newColumn38;

		public String getNewColumn38() {
			return this.newColumn38;
		}

		public String newColumn39;

		public String getNewColumn39() {
			return this.newColumn39;
		}

		public String newColumn40;

		public String getNewColumn40() {
			return this.newColumn40;
		}

		public String newColumn41;

		public String getNewColumn41() {
			return this.newColumn41;
		}

		public String newColumn42;

		public String getNewColumn42() {
			return this.newColumn42;
		}

		public String newColumn43;

		public String getNewColumn43() {
			return this.newColumn43;
		}

		public String newColumn44;

		public String getNewColumn44() {
			return this.newColumn44;
		}

		public String newColumn45;

		public String getNewColumn45() {
			return this.newColumn45;
		}

		public String newColumn46;

		public String getNewColumn46() {
			return this.newColumn46;
		}

		public String newColumn47;

		public String getNewColumn47() {
			return this.newColumn47;
		}

		public String newColumn48;

		public String getNewColumn48() {
			return this.newColumn48;
		}

		public String newColumn49;

		public String getNewColumn49() {
			return this.newColumn49;
		}

		public String newColumn50;

		public String getNewColumn50() {
			return this.newColumn50;
		}

		public String newColumn51;

		public String getNewColumn51() {
			return this.newColumn51;
		}

		public String newColumn52;

		public String getNewColumn52() {
			return this.newColumn52;
		}

		public String newColumn53;

		public String getNewColumn53() {
			return this.newColumn53;
		}

		public String newColumn54;

		public String getNewColumn54() {
			return this.newColumn54;
		}

		public String newColumn55;

		public String getNewColumn55() {
			return this.newColumn55;
		}

		public String newColumn56;

		public String getNewColumn56() {
			return this.newColumn56;
		}

		public String newColumn57;

		public String getNewColumn57() {
			return this.newColumn57;
		}

		public String newColumn58;

		public String getNewColumn58() {
			return this.newColumn58;
		}

		public String newColumn59;

		public String getNewColumn59() {
			return this.newColumn59;
		}

		public String newColumn60;

		public String getNewColumn60() {
			return this.newColumn60;
		}

		public String newColumn61;

		public String getNewColumn61() {
			return this.newColumn61;
		}

		public String newColumn62;

		public String getNewColumn62() {
			return this.newColumn62;
		}

		public String newColumn63;

		public String getNewColumn63() {
			return this.newColumn63;
		}

		public String newColumn64;

		public String getNewColumn64() {
			return this.newColumn64;
		}

		public String newColumn65;

		public String getNewColumn65() {
			return this.newColumn65;
		}

		public String newColumn66;

		public String getNewColumn66() {
			return this.newColumn66;
		}

		public String newColumn67;

		public String getNewColumn67() {
			return this.newColumn67;
		}

		public String newColumn68;

		public String getNewColumn68() {
			return this.newColumn68;
		}

		public String newColumn69;

		public String getNewColumn69() {
			return this.newColumn69;
		}

		public String newColumn70;

		public String getNewColumn70() {
			return this.newColumn70;
		}

		public String newColumn71;

		public String getNewColumn71() {
			return this.newColumn71;
		}

		public String newColumn72;

		public String getNewColumn72() {
			return this.newColumn72;
		}

		public String newColumn73;

		public String getNewColumn73() {
			return this.newColumn73;
		}

		public String newColumn74;

		public String getNewColumn74() {
			return this.newColumn74;
		}

		public String newColumn75;

		public String getNewColumn75() {
			return this.newColumn75;
		}

		public String newColumn76;

		public String getNewColumn76() {
			return this.newColumn76;
		}

		public String newColumn77;

		public String getNewColumn77() {
			return this.newColumn77;
		}

		public String newColumn78;

		public String getNewColumn78() {
			return this.newColumn78;
		}

		public String newColumn79;

		public String getNewColumn79() {
			return this.newColumn79;
		}

		public String newColumn80;

		public String getNewColumn80() {
			return this.newColumn80;
		}

		public String newColumn81;

		public String getNewColumn81() {
			return this.newColumn81;
		}

		public String newColumn82;

		public String getNewColumn82() {
			return this.newColumn82;
		}

		public String newColumn83;

		public String getNewColumn83() {
			return this.newColumn83;
		}

		public String newColumn84;

		public String getNewColumn84() {
			return this.newColumn84;
		}

		public String newColumn85;

		public String getNewColumn85() {
			return this.newColumn85;
		}

		public String newColumn86;

		public String getNewColumn86() {
			return this.newColumn86;
		}

		public String newColumn87;

		public String getNewColumn87() {
			return this.newColumn87;
		}

		public String newColumn88;

		public String getNewColumn88() {
			return this.newColumn88;
		}

		public String newColumn89;

		public String getNewColumn89() {
			return this.newColumn89;
		}

		public String newColumn90;

		public String getNewColumn90() {
			return this.newColumn90;
		}

		public String newColumn91;

		public String getNewColumn91() {
			return this.newColumn91;
		}

		public String newColumn92;

		public String getNewColumn92() {
			return this.newColumn92;
		}

		public String newColumn93;

		public String getNewColumn93() {
			return this.newColumn93;
		}

		public String newColumn94;

		public String getNewColumn94() {
			return this.newColumn94;
		}

		public String newColumn95;

		public String getNewColumn95() {
			return this.newColumn95;
		}

		public String newColumn96;

		public String getNewColumn96() {
			return this.newColumn96;
		}

		public String newColumn97;

		public String getNewColumn97() {
			return this.newColumn97;
		}

		public String newColumn98;

		public String getNewColumn98() {
			return this.newColumn98;
		}

		public String newColumn99;

		public String getNewColumn99() {
			return this.newColumn99;
		}

		public String newColumn100;

		public String getNewColumn100() {
			return this.newColumn100;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final nonNullRowsStruct other = (nonNullRowsStruct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(nonNullRowsStruct other) {

			other.id = this.id;
			other.newColumn1 = this.newColumn1;
			other.newColumn2 = this.newColumn2;
			other.newColumn3 = this.newColumn3;
			other.newColumn4 = this.newColumn4;
			other.newColumn5 = this.newColumn5;
			other.newColumn6 = this.newColumn6;
			other.newColumn7 = this.newColumn7;
			other.newColumn8 = this.newColumn8;
			other.newColumn9 = this.newColumn9;
			other.newColumn10 = this.newColumn10;
			other.newColumn11 = this.newColumn11;
			other.newColumn12 = this.newColumn12;
			other.newColumn13 = this.newColumn13;
			other.newColumn14 = this.newColumn14;
			other.newColumn15 = this.newColumn15;
			other.newColumn16 = this.newColumn16;
			other.newColumn17 = this.newColumn17;
			other.newColumn18 = this.newColumn18;
			other.newColumn19 = this.newColumn19;
			other.newColumn20 = this.newColumn20;
			other.newColumn21 = this.newColumn21;
			other.newColumn22 = this.newColumn22;
			other.newColumn23 = this.newColumn23;
			other.newColumn24 = this.newColumn24;
			other.newColumn25 = this.newColumn25;
			other.newColumn26 = this.newColumn26;
			other.newColumn27 = this.newColumn27;
			other.newColumn28 = this.newColumn28;
			other.newColumn29 = this.newColumn29;
			other.newColumn30 = this.newColumn30;
			other.newColumn31 = this.newColumn31;
			other.newColumn32 = this.newColumn32;
			other.newColumn33 = this.newColumn33;
			other.newColumn34 = this.newColumn34;
			other.newColumn35 = this.newColumn35;
			other.newColumn36 = this.newColumn36;
			other.newColumn37 = this.newColumn37;
			other.newColumn38 = this.newColumn38;
			other.newColumn39 = this.newColumn39;
			other.newColumn40 = this.newColumn40;
			other.newColumn41 = this.newColumn41;
			other.newColumn42 = this.newColumn42;
			other.newColumn43 = this.newColumn43;
			other.newColumn44 = this.newColumn44;
			other.newColumn45 = this.newColumn45;
			other.newColumn46 = this.newColumn46;
			other.newColumn47 = this.newColumn47;
			other.newColumn48 = this.newColumn48;
			other.newColumn49 = this.newColumn49;
			other.newColumn50 = this.newColumn50;
			other.newColumn51 = this.newColumn51;
			other.newColumn52 = this.newColumn52;
			other.newColumn53 = this.newColumn53;
			other.newColumn54 = this.newColumn54;
			other.newColumn55 = this.newColumn55;
			other.newColumn56 = this.newColumn56;
			other.newColumn57 = this.newColumn57;
			other.newColumn58 = this.newColumn58;
			other.newColumn59 = this.newColumn59;
			other.newColumn60 = this.newColumn60;
			other.newColumn61 = this.newColumn61;
			other.newColumn62 = this.newColumn62;
			other.newColumn63 = this.newColumn63;
			other.newColumn64 = this.newColumn64;
			other.newColumn65 = this.newColumn65;
			other.newColumn66 = this.newColumn66;
			other.newColumn67 = this.newColumn67;
			other.newColumn68 = this.newColumn68;
			other.newColumn69 = this.newColumn69;
			other.newColumn70 = this.newColumn70;
			other.newColumn71 = this.newColumn71;
			other.newColumn72 = this.newColumn72;
			other.newColumn73 = this.newColumn73;
			other.newColumn74 = this.newColumn74;
			other.newColumn75 = this.newColumn75;
			other.newColumn76 = this.newColumn76;
			other.newColumn77 = this.newColumn77;
			other.newColumn78 = this.newColumn78;
			other.newColumn79 = this.newColumn79;
			other.newColumn80 = this.newColumn80;
			other.newColumn81 = this.newColumn81;
			other.newColumn82 = this.newColumn82;
			other.newColumn83 = this.newColumn83;
			other.newColumn84 = this.newColumn84;
			other.newColumn85 = this.newColumn85;
			other.newColumn86 = this.newColumn86;
			other.newColumn87 = this.newColumn87;
			other.newColumn88 = this.newColumn88;
			other.newColumn89 = this.newColumn89;
			other.newColumn90 = this.newColumn90;
			other.newColumn91 = this.newColumn91;
			other.newColumn92 = this.newColumn92;
			other.newColumn93 = this.newColumn93;
			other.newColumn94 = this.newColumn94;
			other.newColumn95 = this.newColumn95;
			other.newColumn96 = this.newColumn96;
			other.newColumn97 = this.newColumn97;
			other.newColumn98 = this.newColumn98;
			other.newColumn99 = this.newColumn99;
			other.newColumn100 = this.newColumn100;

		}

		public void copyKeysDataTo(nonNullRowsStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ELAN_Pseudonomize.length) {
					if (length < 1024
							&& commonByteArray_ELAN_Pseudonomize.length == 0) {
						commonByteArray_ELAN_Pseudonomize = new byte[1024];
					} else {
						commonByteArray_ELAN_Pseudonomize = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ELAN_Pseudonomize, 0, length);
				strReturn = new String(commonByteArray_ELAN_Pseudonomize, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Pseudonomize) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.newColumn1 = readString(dis);

					this.newColumn2 = readString(dis);

					this.newColumn3 = readString(dis);

					this.newColumn4 = readString(dis);

					this.newColumn5 = readString(dis);

					this.newColumn6 = readString(dis);

					this.newColumn7 = readString(dis);

					this.newColumn8 = readString(dis);

					this.newColumn9 = readString(dis);

					this.newColumn10 = readString(dis);

					this.newColumn11 = readString(dis);

					this.newColumn12 = readString(dis);

					this.newColumn13 = readString(dis);

					this.newColumn14 = readString(dis);

					this.newColumn15 = readString(dis);

					this.newColumn16 = readString(dis);

					this.newColumn17 = readString(dis);

					this.newColumn18 = readString(dis);

					this.newColumn19 = readString(dis);

					this.newColumn20 = readString(dis);

					this.newColumn21 = readString(dis);

					this.newColumn22 = readString(dis);

					this.newColumn23 = readString(dis);

					this.newColumn24 = readString(dis);

					this.newColumn25 = readString(dis);

					this.newColumn26 = readString(dis);

					this.newColumn27 = readString(dis);

					this.newColumn28 = readString(dis);

					this.newColumn29 = readString(dis);

					this.newColumn30 = readString(dis);

					this.newColumn31 = readString(dis);

					this.newColumn32 = readString(dis);

					this.newColumn33 = readString(dis);

					this.newColumn34 = readString(dis);

					this.newColumn35 = readString(dis);

					this.newColumn36 = readString(dis);

					this.newColumn37 = readString(dis);

					this.newColumn38 = readString(dis);

					this.newColumn39 = readString(dis);

					this.newColumn40 = readString(dis);

					this.newColumn41 = readString(dis);

					this.newColumn42 = readString(dis);

					this.newColumn43 = readString(dis);

					this.newColumn44 = readString(dis);

					this.newColumn45 = readString(dis);

					this.newColumn46 = readString(dis);

					this.newColumn47 = readString(dis);

					this.newColumn48 = readString(dis);

					this.newColumn49 = readString(dis);

					this.newColumn50 = readString(dis);

					this.newColumn51 = readString(dis);

					this.newColumn52 = readString(dis);

					this.newColumn53 = readString(dis);

					this.newColumn54 = readString(dis);

					this.newColumn55 = readString(dis);

					this.newColumn56 = readString(dis);

					this.newColumn57 = readString(dis);

					this.newColumn58 = readString(dis);

					this.newColumn59 = readString(dis);

					this.newColumn60 = readString(dis);

					this.newColumn61 = readString(dis);

					this.newColumn62 = readString(dis);

					this.newColumn63 = readString(dis);

					this.newColumn64 = readString(dis);

					this.newColumn65 = readString(dis);

					this.newColumn66 = readString(dis);

					this.newColumn67 = readString(dis);

					this.newColumn68 = readString(dis);

					this.newColumn69 = readString(dis);

					this.newColumn70 = readString(dis);

					this.newColumn71 = readString(dis);

					this.newColumn72 = readString(dis);

					this.newColumn73 = readString(dis);

					this.newColumn74 = readString(dis);

					this.newColumn75 = readString(dis);

					this.newColumn76 = readString(dis);

					this.newColumn77 = readString(dis);

					this.newColumn78 = readString(dis);

					this.newColumn79 = readString(dis);

					this.newColumn80 = readString(dis);

					this.newColumn81 = readString(dis);

					this.newColumn82 = readString(dis);

					this.newColumn83 = readString(dis);

					this.newColumn84 = readString(dis);

					this.newColumn85 = readString(dis);

					this.newColumn86 = readString(dis);

					this.newColumn87 = readString(dis);

					this.newColumn88 = readString(dis);

					this.newColumn89 = readString(dis);

					this.newColumn90 = readString(dis);

					this.newColumn91 = readString(dis);

					this.newColumn92 = readString(dis);

					this.newColumn93 = readString(dis);

					this.newColumn94 = readString(dis);

					this.newColumn95 = readString(dis);

					this.newColumn96 = readString(dis);

					this.newColumn97 = readString(dis);

					this.newColumn98 = readString(dis);

					this.newColumn99 = readString(dis);

					this.newColumn100 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.newColumn2, dos);

				// String

				writeString(this.newColumn3, dos);

				// String

				writeString(this.newColumn4, dos);

				// String

				writeString(this.newColumn5, dos);

				// String

				writeString(this.newColumn6, dos);

				// String

				writeString(this.newColumn7, dos);

				// String

				writeString(this.newColumn8, dos);

				// String

				writeString(this.newColumn9, dos);

				// String

				writeString(this.newColumn10, dos);

				// String

				writeString(this.newColumn11, dos);

				// String

				writeString(this.newColumn12, dos);

				// String

				writeString(this.newColumn13, dos);

				// String

				writeString(this.newColumn14, dos);

				// String

				writeString(this.newColumn15, dos);

				// String

				writeString(this.newColumn16, dos);

				// String

				writeString(this.newColumn17, dos);

				// String

				writeString(this.newColumn18, dos);

				// String

				writeString(this.newColumn19, dos);

				// String

				writeString(this.newColumn20, dos);

				// String

				writeString(this.newColumn21, dos);

				// String

				writeString(this.newColumn22, dos);

				// String

				writeString(this.newColumn23, dos);

				// String

				writeString(this.newColumn24, dos);

				// String

				writeString(this.newColumn25, dos);

				// String

				writeString(this.newColumn26, dos);

				// String

				writeString(this.newColumn27, dos);

				// String

				writeString(this.newColumn28, dos);

				// String

				writeString(this.newColumn29, dos);

				// String

				writeString(this.newColumn30, dos);

				// String

				writeString(this.newColumn31, dos);

				// String

				writeString(this.newColumn32, dos);

				// String

				writeString(this.newColumn33, dos);

				// String

				writeString(this.newColumn34, dos);

				// String

				writeString(this.newColumn35, dos);

				// String

				writeString(this.newColumn36, dos);

				// String

				writeString(this.newColumn37, dos);

				// String

				writeString(this.newColumn38, dos);

				// String

				writeString(this.newColumn39, dos);

				// String

				writeString(this.newColumn40, dos);

				// String

				writeString(this.newColumn41, dos);

				// String

				writeString(this.newColumn42, dos);

				// String

				writeString(this.newColumn43, dos);

				// String

				writeString(this.newColumn44, dos);

				// String

				writeString(this.newColumn45, dos);

				// String

				writeString(this.newColumn46, dos);

				// String

				writeString(this.newColumn47, dos);

				// String

				writeString(this.newColumn48, dos);

				// String

				writeString(this.newColumn49, dos);

				// String

				writeString(this.newColumn50, dos);

				// String

				writeString(this.newColumn51, dos);

				// String

				writeString(this.newColumn52, dos);

				// String

				writeString(this.newColumn53, dos);

				// String

				writeString(this.newColumn54, dos);

				// String

				writeString(this.newColumn55, dos);

				// String

				writeString(this.newColumn56, dos);

				// String

				writeString(this.newColumn57, dos);

				// String

				writeString(this.newColumn58, dos);

				// String

				writeString(this.newColumn59, dos);

				// String

				writeString(this.newColumn60, dos);

				// String

				writeString(this.newColumn61, dos);

				// String

				writeString(this.newColumn62, dos);

				// String

				writeString(this.newColumn63, dos);

				// String

				writeString(this.newColumn64, dos);

				// String

				writeString(this.newColumn65, dos);

				// String

				writeString(this.newColumn66, dos);

				// String

				writeString(this.newColumn67, dos);

				// String

				writeString(this.newColumn68, dos);

				// String

				writeString(this.newColumn69, dos);

				// String

				writeString(this.newColumn70, dos);

				// String

				writeString(this.newColumn71, dos);

				// String

				writeString(this.newColumn72, dos);

				// String

				writeString(this.newColumn73, dos);

				// String

				writeString(this.newColumn74, dos);

				// String

				writeString(this.newColumn75, dos);

				// String

				writeString(this.newColumn76, dos);

				// String

				writeString(this.newColumn77, dos);

				// String

				writeString(this.newColumn78, dos);

				// String

				writeString(this.newColumn79, dos);

				// String

				writeString(this.newColumn80, dos);

				// String

				writeString(this.newColumn81, dos);

				// String

				writeString(this.newColumn82, dos);

				// String

				writeString(this.newColumn83, dos);

				// String

				writeString(this.newColumn84, dos);

				// String

				writeString(this.newColumn85, dos);

				// String

				writeString(this.newColumn86, dos);

				// String

				writeString(this.newColumn87, dos);

				// String

				writeString(this.newColumn88, dos);

				// String

				writeString(this.newColumn89, dos);

				// String

				writeString(this.newColumn90, dos);

				// String

				writeString(this.newColumn91, dos);

				// String

				writeString(this.newColumn92, dos);

				// String

				writeString(this.newColumn93, dos);

				// String

				writeString(this.newColumn94, dos);

				// String

				writeString(this.newColumn95, dos);

				// String

				writeString(this.newColumn96, dos);

				// String

				writeString(this.newColumn97, dos);

				// String

				writeString(this.newColumn98, dos);

				// String

				writeString(this.newColumn99, dos);

				// String

				writeString(this.newColumn100, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + newColumn2);
			sb.append(",newColumn3=" + newColumn3);
			sb.append(",newColumn4=" + newColumn4);
			sb.append(",newColumn5=" + newColumn5);
			sb.append(",newColumn6=" + newColumn6);
			sb.append(",newColumn7=" + newColumn7);
			sb.append(",newColumn8=" + newColumn8);
			sb.append(",newColumn9=" + newColumn9);
			sb.append(",newColumn10=" + newColumn10);
			sb.append(",newColumn11=" + newColumn11);
			sb.append(",newColumn12=" + newColumn12);
			sb.append(",newColumn13=" + newColumn13);
			sb.append(",newColumn14=" + newColumn14);
			sb.append(",newColumn15=" + newColumn15);
			sb.append(",newColumn16=" + newColumn16);
			sb.append(",newColumn17=" + newColumn17);
			sb.append(",newColumn18=" + newColumn18);
			sb.append(",newColumn19=" + newColumn19);
			sb.append(",newColumn20=" + newColumn20);
			sb.append(",newColumn21=" + newColumn21);
			sb.append(",newColumn22=" + newColumn22);
			sb.append(",newColumn23=" + newColumn23);
			sb.append(",newColumn24=" + newColumn24);
			sb.append(",newColumn25=" + newColumn25);
			sb.append(",newColumn26=" + newColumn26);
			sb.append(",newColumn27=" + newColumn27);
			sb.append(",newColumn28=" + newColumn28);
			sb.append(",newColumn29=" + newColumn29);
			sb.append(",newColumn30=" + newColumn30);
			sb.append(",newColumn31=" + newColumn31);
			sb.append(",newColumn32=" + newColumn32);
			sb.append(",newColumn33=" + newColumn33);
			sb.append(",newColumn34=" + newColumn34);
			sb.append(",newColumn35=" + newColumn35);
			sb.append(",newColumn36=" + newColumn36);
			sb.append(",newColumn37=" + newColumn37);
			sb.append(",newColumn38=" + newColumn38);
			sb.append(",newColumn39=" + newColumn39);
			sb.append(",newColumn40=" + newColumn40);
			sb.append(",newColumn41=" + newColumn41);
			sb.append(",newColumn42=" + newColumn42);
			sb.append(",newColumn43=" + newColumn43);
			sb.append(",newColumn44=" + newColumn44);
			sb.append(",newColumn45=" + newColumn45);
			sb.append(",newColumn46=" + newColumn46);
			sb.append(",newColumn47=" + newColumn47);
			sb.append(",newColumn48=" + newColumn48);
			sb.append(",newColumn49=" + newColumn49);
			sb.append(",newColumn50=" + newColumn50);
			sb.append(",newColumn51=" + newColumn51);
			sb.append(",newColumn52=" + newColumn52);
			sb.append(",newColumn53=" + newColumn53);
			sb.append(",newColumn54=" + newColumn54);
			sb.append(",newColumn55=" + newColumn55);
			sb.append(",newColumn56=" + newColumn56);
			sb.append(",newColumn57=" + newColumn57);
			sb.append(",newColumn58=" + newColumn58);
			sb.append(",newColumn59=" + newColumn59);
			sb.append(",newColumn60=" + newColumn60);
			sb.append(",newColumn61=" + newColumn61);
			sb.append(",newColumn62=" + newColumn62);
			sb.append(",newColumn63=" + newColumn63);
			sb.append(",newColumn64=" + newColumn64);
			sb.append(",newColumn65=" + newColumn65);
			sb.append(",newColumn66=" + newColumn66);
			sb.append(",newColumn67=" + newColumn67);
			sb.append(",newColumn68=" + newColumn68);
			sb.append(",newColumn69=" + newColumn69);
			sb.append(",newColumn70=" + newColumn70);
			sb.append(",newColumn71=" + newColumn71);
			sb.append(",newColumn72=" + newColumn72);
			sb.append(",newColumn73=" + newColumn73);
			sb.append(",newColumn74=" + newColumn74);
			sb.append(",newColumn75=" + newColumn75);
			sb.append(",newColumn76=" + newColumn76);
			sb.append(",newColumn77=" + newColumn77);
			sb.append(",newColumn78=" + newColumn78);
			sb.append(",newColumn79=" + newColumn79);
			sb.append(",newColumn80=" + newColumn80);
			sb.append(",newColumn81=" + newColumn81);
			sb.append(",newColumn82=" + newColumn82);
			sb.append(",newColumn83=" + newColumn83);
			sb.append(",newColumn84=" + newColumn84);
			sb.append(",newColumn85=" + newColumn85);
			sb.append(",newColumn86=" + newColumn86);
			sb.append(",newColumn87=" + newColumn87);
			sb.append(",newColumn88=" + newColumn88);
			sb.append(",newColumn89=" + newColumn89);
			sb.append(",newColumn90=" + newColumn90);
			sb.append(",newColumn91=" + newColumn91);
			sb.append(",newColumn92=" + newColumn92);
			sb.append(",newColumn93=" + newColumn93);
			sb.append(",newColumn94=" + newColumn94);
			sb.append(",newColumn95=" + newColumn95);
			sb.append(",newColumn96=" + newColumn96);
			sb.append(",newColumn97=" + newColumn97);
			sb.append(",newColumn98=" + newColumn98);
			sb.append(",newColumn99=" + newColumn99);
			sb.append(",newColumn100=" + newColumn100);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(nonNullRowsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rowPseudoStruct implements
			routines.system.IPersistableRow<rowPseudoStruct> {
		final static byte[] commonByteArrayLock_ELAN_Pseudonomize = new byte[0];
		static byte[] commonByteArray_ELAN_Pseudonomize = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String newColumn2;

		public String getNewColumn2() {
			return this.newColumn2;
		}

		public String newColumn3;

		public String getNewColumn3() {
			return this.newColumn3;
		}

		public String newColumn4;

		public String getNewColumn4() {
			return this.newColumn4;
		}

		public String newColumn5;

		public String getNewColumn5() {
			return this.newColumn5;
		}

		public String newColumn6;

		public String getNewColumn6() {
			return this.newColumn6;
		}

		public String newColumn7;

		public String getNewColumn7() {
			return this.newColumn7;
		}

		public String newColumn8;

		public String getNewColumn8() {
			return this.newColumn8;
		}

		public String newColumn9;

		public String getNewColumn9() {
			return this.newColumn9;
		}

		public String newColumn10;

		public String getNewColumn10() {
			return this.newColumn10;
		}

		public String newColumn11;

		public String getNewColumn11() {
			return this.newColumn11;
		}

		public String newColumn12;

		public String getNewColumn12() {
			return this.newColumn12;
		}

		public String newColumn13;

		public String getNewColumn13() {
			return this.newColumn13;
		}

		public String newColumn14;

		public String getNewColumn14() {
			return this.newColumn14;
		}

		public String newColumn15;

		public String getNewColumn15() {
			return this.newColumn15;
		}

		public String newColumn16;

		public String getNewColumn16() {
			return this.newColumn16;
		}

		public String newColumn17;

		public String getNewColumn17() {
			return this.newColumn17;
		}

		public String newColumn18;

		public String getNewColumn18() {
			return this.newColumn18;
		}

		public String newColumn19;

		public String getNewColumn19() {
			return this.newColumn19;
		}

		public String newColumn20;

		public String getNewColumn20() {
			return this.newColumn20;
		}

		public String newColumn21;

		public String getNewColumn21() {
			return this.newColumn21;
		}

		public String newColumn22;

		public String getNewColumn22() {
			return this.newColumn22;
		}

		public String newColumn23;

		public String getNewColumn23() {
			return this.newColumn23;
		}

		public String newColumn24;

		public String getNewColumn24() {
			return this.newColumn24;
		}

		public String newColumn25;

		public String getNewColumn25() {
			return this.newColumn25;
		}

		public String newColumn26;

		public String getNewColumn26() {
			return this.newColumn26;
		}

		public String newColumn27;

		public String getNewColumn27() {
			return this.newColumn27;
		}

		public String newColumn28;

		public String getNewColumn28() {
			return this.newColumn28;
		}

		public String newColumn29;

		public String getNewColumn29() {
			return this.newColumn29;
		}

		public String newColumn30;

		public String getNewColumn30() {
			return this.newColumn30;
		}

		public String newColumn31;

		public String getNewColumn31() {
			return this.newColumn31;
		}

		public String newColumn32;

		public String getNewColumn32() {
			return this.newColumn32;
		}

		public String newColumn33;

		public String getNewColumn33() {
			return this.newColumn33;
		}

		public String newColumn34;

		public String getNewColumn34() {
			return this.newColumn34;
		}

		public String newColumn35;

		public String getNewColumn35() {
			return this.newColumn35;
		}

		public String newColumn36;

		public String getNewColumn36() {
			return this.newColumn36;
		}

		public String newColumn37;

		public String getNewColumn37() {
			return this.newColumn37;
		}

		public String newColumn38;

		public String getNewColumn38() {
			return this.newColumn38;
		}

		public String newColumn39;

		public String getNewColumn39() {
			return this.newColumn39;
		}

		public String newColumn40;

		public String getNewColumn40() {
			return this.newColumn40;
		}

		public String newColumn41;

		public String getNewColumn41() {
			return this.newColumn41;
		}

		public String newColumn42;

		public String getNewColumn42() {
			return this.newColumn42;
		}

		public String newColumn43;

		public String getNewColumn43() {
			return this.newColumn43;
		}

		public String newColumn44;

		public String getNewColumn44() {
			return this.newColumn44;
		}

		public String newColumn45;

		public String getNewColumn45() {
			return this.newColumn45;
		}

		public String newColumn46;

		public String getNewColumn46() {
			return this.newColumn46;
		}

		public String newColumn47;

		public String getNewColumn47() {
			return this.newColumn47;
		}

		public String newColumn48;

		public String getNewColumn48() {
			return this.newColumn48;
		}

		public String newColumn49;

		public String getNewColumn49() {
			return this.newColumn49;
		}

		public String newColumn50;

		public String getNewColumn50() {
			return this.newColumn50;
		}

		public String newColumn51;

		public String getNewColumn51() {
			return this.newColumn51;
		}

		public String newColumn52;

		public String getNewColumn52() {
			return this.newColumn52;
		}

		public String newColumn53;

		public String getNewColumn53() {
			return this.newColumn53;
		}

		public String newColumn54;

		public String getNewColumn54() {
			return this.newColumn54;
		}

		public String newColumn55;

		public String getNewColumn55() {
			return this.newColumn55;
		}

		public String newColumn56;

		public String getNewColumn56() {
			return this.newColumn56;
		}

		public String newColumn57;

		public String getNewColumn57() {
			return this.newColumn57;
		}

		public String newColumn58;

		public String getNewColumn58() {
			return this.newColumn58;
		}

		public String newColumn59;

		public String getNewColumn59() {
			return this.newColumn59;
		}

		public String newColumn60;

		public String getNewColumn60() {
			return this.newColumn60;
		}

		public String newColumn61;

		public String getNewColumn61() {
			return this.newColumn61;
		}

		public String newColumn62;

		public String getNewColumn62() {
			return this.newColumn62;
		}

		public String newColumn63;

		public String getNewColumn63() {
			return this.newColumn63;
		}

		public String newColumn64;

		public String getNewColumn64() {
			return this.newColumn64;
		}

		public String newColumn65;

		public String getNewColumn65() {
			return this.newColumn65;
		}

		public String newColumn66;

		public String getNewColumn66() {
			return this.newColumn66;
		}

		public String newColumn67;

		public String getNewColumn67() {
			return this.newColumn67;
		}

		public String newColumn68;

		public String getNewColumn68() {
			return this.newColumn68;
		}

		public String newColumn69;

		public String getNewColumn69() {
			return this.newColumn69;
		}

		public String newColumn70;

		public String getNewColumn70() {
			return this.newColumn70;
		}

		public String newColumn71;

		public String getNewColumn71() {
			return this.newColumn71;
		}

		public String newColumn72;

		public String getNewColumn72() {
			return this.newColumn72;
		}

		public String newColumn73;

		public String getNewColumn73() {
			return this.newColumn73;
		}

		public String newColumn74;

		public String getNewColumn74() {
			return this.newColumn74;
		}

		public String newColumn75;

		public String getNewColumn75() {
			return this.newColumn75;
		}

		public String newColumn76;

		public String getNewColumn76() {
			return this.newColumn76;
		}

		public String newColumn77;

		public String getNewColumn77() {
			return this.newColumn77;
		}

		public String newColumn78;

		public String getNewColumn78() {
			return this.newColumn78;
		}

		public String newColumn79;

		public String getNewColumn79() {
			return this.newColumn79;
		}

		public String newColumn80;

		public String getNewColumn80() {
			return this.newColumn80;
		}

		public String newColumn81;

		public String getNewColumn81() {
			return this.newColumn81;
		}

		public String newColumn82;

		public String getNewColumn82() {
			return this.newColumn82;
		}

		public String newColumn83;

		public String getNewColumn83() {
			return this.newColumn83;
		}

		public String newColumn84;

		public String getNewColumn84() {
			return this.newColumn84;
		}

		public String newColumn85;

		public String getNewColumn85() {
			return this.newColumn85;
		}

		public String newColumn86;

		public String getNewColumn86() {
			return this.newColumn86;
		}

		public String newColumn87;

		public String getNewColumn87() {
			return this.newColumn87;
		}

		public String newColumn88;

		public String getNewColumn88() {
			return this.newColumn88;
		}

		public String newColumn89;

		public String getNewColumn89() {
			return this.newColumn89;
		}

		public String newColumn90;

		public String getNewColumn90() {
			return this.newColumn90;
		}

		public String newColumn91;

		public String getNewColumn91() {
			return this.newColumn91;
		}

		public String newColumn92;

		public String getNewColumn92() {
			return this.newColumn92;
		}

		public String newColumn93;

		public String getNewColumn93() {
			return this.newColumn93;
		}

		public String newColumn94;

		public String getNewColumn94() {
			return this.newColumn94;
		}

		public String newColumn95;

		public String getNewColumn95() {
			return this.newColumn95;
		}

		public String newColumn96;

		public String getNewColumn96() {
			return this.newColumn96;
		}

		public String newColumn97;

		public String getNewColumn97() {
			return this.newColumn97;
		}

		public String newColumn98;

		public String getNewColumn98() {
			return this.newColumn98;
		}

		public String newColumn99;

		public String getNewColumn99() {
			return this.newColumn99;
		}

		public String newColumn100;

		public String getNewColumn100() {
			return this.newColumn100;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final rowPseudoStruct other = (rowPseudoStruct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(rowPseudoStruct other) {

			other.id = this.id;
			other.newColumn1 = this.newColumn1;
			other.newColumn2 = this.newColumn2;
			other.newColumn3 = this.newColumn3;
			other.newColumn4 = this.newColumn4;
			other.newColumn5 = this.newColumn5;
			other.newColumn6 = this.newColumn6;
			other.newColumn7 = this.newColumn7;
			other.newColumn8 = this.newColumn8;
			other.newColumn9 = this.newColumn9;
			other.newColumn10 = this.newColumn10;
			other.newColumn11 = this.newColumn11;
			other.newColumn12 = this.newColumn12;
			other.newColumn13 = this.newColumn13;
			other.newColumn14 = this.newColumn14;
			other.newColumn15 = this.newColumn15;
			other.newColumn16 = this.newColumn16;
			other.newColumn17 = this.newColumn17;
			other.newColumn18 = this.newColumn18;
			other.newColumn19 = this.newColumn19;
			other.newColumn20 = this.newColumn20;
			other.newColumn21 = this.newColumn21;
			other.newColumn22 = this.newColumn22;
			other.newColumn23 = this.newColumn23;
			other.newColumn24 = this.newColumn24;
			other.newColumn25 = this.newColumn25;
			other.newColumn26 = this.newColumn26;
			other.newColumn27 = this.newColumn27;
			other.newColumn28 = this.newColumn28;
			other.newColumn29 = this.newColumn29;
			other.newColumn30 = this.newColumn30;
			other.newColumn31 = this.newColumn31;
			other.newColumn32 = this.newColumn32;
			other.newColumn33 = this.newColumn33;
			other.newColumn34 = this.newColumn34;
			other.newColumn35 = this.newColumn35;
			other.newColumn36 = this.newColumn36;
			other.newColumn37 = this.newColumn37;
			other.newColumn38 = this.newColumn38;
			other.newColumn39 = this.newColumn39;
			other.newColumn40 = this.newColumn40;
			other.newColumn41 = this.newColumn41;
			other.newColumn42 = this.newColumn42;
			other.newColumn43 = this.newColumn43;
			other.newColumn44 = this.newColumn44;
			other.newColumn45 = this.newColumn45;
			other.newColumn46 = this.newColumn46;
			other.newColumn47 = this.newColumn47;
			other.newColumn48 = this.newColumn48;
			other.newColumn49 = this.newColumn49;
			other.newColumn50 = this.newColumn50;
			other.newColumn51 = this.newColumn51;
			other.newColumn52 = this.newColumn52;
			other.newColumn53 = this.newColumn53;
			other.newColumn54 = this.newColumn54;
			other.newColumn55 = this.newColumn55;
			other.newColumn56 = this.newColumn56;
			other.newColumn57 = this.newColumn57;
			other.newColumn58 = this.newColumn58;
			other.newColumn59 = this.newColumn59;
			other.newColumn60 = this.newColumn60;
			other.newColumn61 = this.newColumn61;
			other.newColumn62 = this.newColumn62;
			other.newColumn63 = this.newColumn63;
			other.newColumn64 = this.newColumn64;
			other.newColumn65 = this.newColumn65;
			other.newColumn66 = this.newColumn66;
			other.newColumn67 = this.newColumn67;
			other.newColumn68 = this.newColumn68;
			other.newColumn69 = this.newColumn69;
			other.newColumn70 = this.newColumn70;
			other.newColumn71 = this.newColumn71;
			other.newColumn72 = this.newColumn72;
			other.newColumn73 = this.newColumn73;
			other.newColumn74 = this.newColumn74;
			other.newColumn75 = this.newColumn75;
			other.newColumn76 = this.newColumn76;
			other.newColumn77 = this.newColumn77;
			other.newColumn78 = this.newColumn78;
			other.newColumn79 = this.newColumn79;
			other.newColumn80 = this.newColumn80;
			other.newColumn81 = this.newColumn81;
			other.newColumn82 = this.newColumn82;
			other.newColumn83 = this.newColumn83;
			other.newColumn84 = this.newColumn84;
			other.newColumn85 = this.newColumn85;
			other.newColumn86 = this.newColumn86;
			other.newColumn87 = this.newColumn87;
			other.newColumn88 = this.newColumn88;
			other.newColumn89 = this.newColumn89;
			other.newColumn90 = this.newColumn90;
			other.newColumn91 = this.newColumn91;
			other.newColumn92 = this.newColumn92;
			other.newColumn93 = this.newColumn93;
			other.newColumn94 = this.newColumn94;
			other.newColumn95 = this.newColumn95;
			other.newColumn96 = this.newColumn96;
			other.newColumn97 = this.newColumn97;
			other.newColumn98 = this.newColumn98;
			other.newColumn99 = this.newColumn99;
			other.newColumn100 = this.newColumn100;

		}

		public void copyKeysDataTo(rowPseudoStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ELAN_Pseudonomize.length) {
					if (length < 1024
							&& commonByteArray_ELAN_Pseudonomize.length == 0) {
						commonByteArray_ELAN_Pseudonomize = new byte[1024];
					} else {
						commonByteArray_ELAN_Pseudonomize = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ELAN_Pseudonomize, 0, length);
				strReturn = new String(commonByteArray_ELAN_Pseudonomize, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Pseudonomize) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.newColumn1 = readString(dis);

					this.newColumn2 = readString(dis);

					this.newColumn3 = readString(dis);

					this.newColumn4 = readString(dis);

					this.newColumn5 = readString(dis);

					this.newColumn6 = readString(dis);

					this.newColumn7 = readString(dis);

					this.newColumn8 = readString(dis);

					this.newColumn9 = readString(dis);

					this.newColumn10 = readString(dis);

					this.newColumn11 = readString(dis);

					this.newColumn12 = readString(dis);

					this.newColumn13 = readString(dis);

					this.newColumn14 = readString(dis);

					this.newColumn15 = readString(dis);

					this.newColumn16 = readString(dis);

					this.newColumn17 = readString(dis);

					this.newColumn18 = readString(dis);

					this.newColumn19 = readString(dis);

					this.newColumn20 = readString(dis);

					this.newColumn21 = readString(dis);

					this.newColumn22 = readString(dis);

					this.newColumn23 = readString(dis);

					this.newColumn24 = readString(dis);

					this.newColumn25 = readString(dis);

					this.newColumn26 = readString(dis);

					this.newColumn27 = readString(dis);

					this.newColumn28 = readString(dis);

					this.newColumn29 = readString(dis);

					this.newColumn30 = readString(dis);

					this.newColumn31 = readString(dis);

					this.newColumn32 = readString(dis);

					this.newColumn33 = readString(dis);

					this.newColumn34 = readString(dis);

					this.newColumn35 = readString(dis);

					this.newColumn36 = readString(dis);

					this.newColumn37 = readString(dis);

					this.newColumn38 = readString(dis);

					this.newColumn39 = readString(dis);

					this.newColumn40 = readString(dis);

					this.newColumn41 = readString(dis);

					this.newColumn42 = readString(dis);

					this.newColumn43 = readString(dis);

					this.newColumn44 = readString(dis);

					this.newColumn45 = readString(dis);

					this.newColumn46 = readString(dis);

					this.newColumn47 = readString(dis);

					this.newColumn48 = readString(dis);

					this.newColumn49 = readString(dis);

					this.newColumn50 = readString(dis);

					this.newColumn51 = readString(dis);

					this.newColumn52 = readString(dis);

					this.newColumn53 = readString(dis);

					this.newColumn54 = readString(dis);

					this.newColumn55 = readString(dis);

					this.newColumn56 = readString(dis);

					this.newColumn57 = readString(dis);

					this.newColumn58 = readString(dis);

					this.newColumn59 = readString(dis);

					this.newColumn60 = readString(dis);

					this.newColumn61 = readString(dis);

					this.newColumn62 = readString(dis);

					this.newColumn63 = readString(dis);

					this.newColumn64 = readString(dis);

					this.newColumn65 = readString(dis);

					this.newColumn66 = readString(dis);

					this.newColumn67 = readString(dis);

					this.newColumn68 = readString(dis);

					this.newColumn69 = readString(dis);

					this.newColumn70 = readString(dis);

					this.newColumn71 = readString(dis);

					this.newColumn72 = readString(dis);

					this.newColumn73 = readString(dis);

					this.newColumn74 = readString(dis);

					this.newColumn75 = readString(dis);

					this.newColumn76 = readString(dis);

					this.newColumn77 = readString(dis);

					this.newColumn78 = readString(dis);

					this.newColumn79 = readString(dis);

					this.newColumn80 = readString(dis);

					this.newColumn81 = readString(dis);

					this.newColumn82 = readString(dis);

					this.newColumn83 = readString(dis);

					this.newColumn84 = readString(dis);

					this.newColumn85 = readString(dis);

					this.newColumn86 = readString(dis);

					this.newColumn87 = readString(dis);

					this.newColumn88 = readString(dis);

					this.newColumn89 = readString(dis);

					this.newColumn90 = readString(dis);

					this.newColumn91 = readString(dis);

					this.newColumn92 = readString(dis);

					this.newColumn93 = readString(dis);

					this.newColumn94 = readString(dis);

					this.newColumn95 = readString(dis);

					this.newColumn96 = readString(dis);

					this.newColumn97 = readString(dis);

					this.newColumn98 = readString(dis);

					this.newColumn99 = readString(dis);

					this.newColumn100 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.newColumn2, dos);

				// String

				writeString(this.newColumn3, dos);

				// String

				writeString(this.newColumn4, dos);

				// String

				writeString(this.newColumn5, dos);

				// String

				writeString(this.newColumn6, dos);

				// String

				writeString(this.newColumn7, dos);

				// String

				writeString(this.newColumn8, dos);

				// String

				writeString(this.newColumn9, dos);

				// String

				writeString(this.newColumn10, dos);

				// String

				writeString(this.newColumn11, dos);

				// String

				writeString(this.newColumn12, dos);

				// String

				writeString(this.newColumn13, dos);

				// String

				writeString(this.newColumn14, dos);

				// String

				writeString(this.newColumn15, dos);

				// String

				writeString(this.newColumn16, dos);

				// String

				writeString(this.newColumn17, dos);

				// String

				writeString(this.newColumn18, dos);

				// String

				writeString(this.newColumn19, dos);

				// String

				writeString(this.newColumn20, dos);

				// String

				writeString(this.newColumn21, dos);

				// String

				writeString(this.newColumn22, dos);

				// String

				writeString(this.newColumn23, dos);

				// String

				writeString(this.newColumn24, dos);

				// String

				writeString(this.newColumn25, dos);

				// String

				writeString(this.newColumn26, dos);

				// String

				writeString(this.newColumn27, dos);

				// String

				writeString(this.newColumn28, dos);

				// String

				writeString(this.newColumn29, dos);

				// String

				writeString(this.newColumn30, dos);

				// String

				writeString(this.newColumn31, dos);

				// String

				writeString(this.newColumn32, dos);

				// String

				writeString(this.newColumn33, dos);

				// String

				writeString(this.newColumn34, dos);

				// String

				writeString(this.newColumn35, dos);

				// String

				writeString(this.newColumn36, dos);

				// String

				writeString(this.newColumn37, dos);

				// String

				writeString(this.newColumn38, dos);

				// String

				writeString(this.newColumn39, dos);

				// String

				writeString(this.newColumn40, dos);

				// String

				writeString(this.newColumn41, dos);

				// String

				writeString(this.newColumn42, dos);

				// String

				writeString(this.newColumn43, dos);

				// String

				writeString(this.newColumn44, dos);

				// String

				writeString(this.newColumn45, dos);

				// String

				writeString(this.newColumn46, dos);

				// String

				writeString(this.newColumn47, dos);

				// String

				writeString(this.newColumn48, dos);

				// String

				writeString(this.newColumn49, dos);

				// String

				writeString(this.newColumn50, dos);

				// String

				writeString(this.newColumn51, dos);

				// String

				writeString(this.newColumn52, dos);

				// String

				writeString(this.newColumn53, dos);

				// String

				writeString(this.newColumn54, dos);

				// String

				writeString(this.newColumn55, dos);

				// String

				writeString(this.newColumn56, dos);

				// String

				writeString(this.newColumn57, dos);

				// String

				writeString(this.newColumn58, dos);

				// String

				writeString(this.newColumn59, dos);

				// String

				writeString(this.newColumn60, dos);

				// String

				writeString(this.newColumn61, dos);

				// String

				writeString(this.newColumn62, dos);

				// String

				writeString(this.newColumn63, dos);

				// String

				writeString(this.newColumn64, dos);

				// String

				writeString(this.newColumn65, dos);

				// String

				writeString(this.newColumn66, dos);

				// String

				writeString(this.newColumn67, dos);

				// String

				writeString(this.newColumn68, dos);

				// String

				writeString(this.newColumn69, dos);

				// String

				writeString(this.newColumn70, dos);

				// String

				writeString(this.newColumn71, dos);

				// String

				writeString(this.newColumn72, dos);

				// String

				writeString(this.newColumn73, dos);

				// String

				writeString(this.newColumn74, dos);

				// String

				writeString(this.newColumn75, dos);

				// String

				writeString(this.newColumn76, dos);

				// String

				writeString(this.newColumn77, dos);

				// String

				writeString(this.newColumn78, dos);

				// String

				writeString(this.newColumn79, dos);

				// String

				writeString(this.newColumn80, dos);

				// String

				writeString(this.newColumn81, dos);

				// String

				writeString(this.newColumn82, dos);

				// String

				writeString(this.newColumn83, dos);

				// String

				writeString(this.newColumn84, dos);

				// String

				writeString(this.newColumn85, dos);

				// String

				writeString(this.newColumn86, dos);

				// String

				writeString(this.newColumn87, dos);

				// String

				writeString(this.newColumn88, dos);

				// String

				writeString(this.newColumn89, dos);

				// String

				writeString(this.newColumn90, dos);

				// String

				writeString(this.newColumn91, dos);

				// String

				writeString(this.newColumn92, dos);

				// String

				writeString(this.newColumn93, dos);

				// String

				writeString(this.newColumn94, dos);

				// String

				writeString(this.newColumn95, dos);

				// String

				writeString(this.newColumn96, dos);

				// String

				writeString(this.newColumn97, dos);

				// String

				writeString(this.newColumn98, dos);

				// String

				writeString(this.newColumn99, dos);

				// String

				writeString(this.newColumn100, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + newColumn2);
			sb.append(",newColumn3=" + newColumn3);
			sb.append(",newColumn4=" + newColumn4);
			sb.append(",newColumn5=" + newColumn5);
			sb.append(",newColumn6=" + newColumn6);
			sb.append(",newColumn7=" + newColumn7);
			sb.append(",newColumn8=" + newColumn8);
			sb.append(",newColumn9=" + newColumn9);
			sb.append(",newColumn10=" + newColumn10);
			sb.append(",newColumn11=" + newColumn11);
			sb.append(",newColumn12=" + newColumn12);
			sb.append(",newColumn13=" + newColumn13);
			sb.append(",newColumn14=" + newColumn14);
			sb.append(",newColumn15=" + newColumn15);
			sb.append(",newColumn16=" + newColumn16);
			sb.append(",newColumn17=" + newColumn17);
			sb.append(",newColumn18=" + newColumn18);
			sb.append(",newColumn19=" + newColumn19);
			sb.append(",newColumn20=" + newColumn20);
			sb.append(",newColumn21=" + newColumn21);
			sb.append(",newColumn22=" + newColumn22);
			sb.append(",newColumn23=" + newColumn23);
			sb.append(",newColumn24=" + newColumn24);
			sb.append(",newColumn25=" + newColumn25);
			sb.append(",newColumn26=" + newColumn26);
			sb.append(",newColumn27=" + newColumn27);
			sb.append(",newColumn28=" + newColumn28);
			sb.append(",newColumn29=" + newColumn29);
			sb.append(",newColumn30=" + newColumn30);
			sb.append(",newColumn31=" + newColumn31);
			sb.append(",newColumn32=" + newColumn32);
			sb.append(",newColumn33=" + newColumn33);
			sb.append(",newColumn34=" + newColumn34);
			sb.append(",newColumn35=" + newColumn35);
			sb.append(",newColumn36=" + newColumn36);
			sb.append(",newColumn37=" + newColumn37);
			sb.append(",newColumn38=" + newColumn38);
			sb.append(",newColumn39=" + newColumn39);
			sb.append(",newColumn40=" + newColumn40);
			sb.append(",newColumn41=" + newColumn41);
			sb.append(",newColumn42=" + newColumn42);
			sb.append(",newColumn43=" + newColumn43);
			sb.append(",newColumn44=" + newColumn44);
			sb.append(",newColumn45=" + newColumn45);
			sb.append(",newColumn46=" + newColumn46);
			sb.append(",newColumn47=" + newColumn47);
			sb.append(",newColumn48=" + newColumn48);
			sb.append(",newColumn49=" + newColumn49);
			sb.append(",newColumn50=" + newColumn50);
			sb.append(",newColumn51=" + newColumn51);
			sb.append(",newColumn52=" + newColumn52);
			sb.append(",newColumn53=" + newColumn53);
			sb.append(",newColumn54=" + newColumn54);
			sb.append(",newColumn55=" + newColumn55);
			sb.append(",newColumn56=" + newColumn56);
			sb.append(",newColumn57=" + newColumn57);
			sb.append(",newColumn58=" + newColumn58);
			sb.append(",newColumn59=" + newColumn59);
			sb.append(",newColumn60=" + newColumn60);
			sb.append(",newColumn61=" + newColumn61);
			sb.append(",newColumn62=" + newColumn62);
			sb.append(",newColumn63=" + newColumn63);
			sb.append(",newColumn64=" + newColumn64);
			sb.append(",newColumn65=" + newColumn65);
			sb.append(",newColumn66=" + newColumn66);
			sb.append(",newColumn67=" + newColumn67);
			sb.append(",newColumn68=" + newColumn68);
			sb.append(",newColumn69=" + newColumn69);
			sb.append(",newColumn70=" + newColumn70);
			sb.append(",newColumn71=" + newColumn71);
			sb.append(",newColumn72=" + newColumn72);
			sb.append(",newColumn73=" + newColumn73);
			sb.append(",newColumn74=" + newColumn74);
			sb.append(",newColumn75=" + newColumn75);
			sb.append(",newColumn76=" + newColumn76);
			sb.append(",newColumn77=" + newColumn77);
			sb.append(",newColumn78=" + newColumn78);
			sb.append(",newColumn79=" + newColumn79);
			sb.append(",newColumn80=" + newColumn80);
			sb.append(",newColumn81=" + newColumn81);
			sb.append(",newColumn82=" + newColumn82);
			sb.append(",newColumn83=" + newColumn83);
			sb.append(",newColumn84=" + newColumn84);
			sb.append(",newColumn85=" + newColumn85);
			sb.append(",newColumn86=" + newColumn86);
			sb.append(",newColumn87=" + newColumn87);
			sb.append(",newColumn88=" + newColumn88);
			sb.append(",newColumn89=" + newColumn89);
			sb.append(",newColumn90=" + newColumn90);
			sb.append(",newColumn91=" + newColumn91);
			sb.append(",newColumn92=" + newColumn92);
			sb.append(",newColumn93=" + newColumn93);
			sb.append(",newColumn94=" + newColumn94);
			sb.append(",newColumn95=" + newColumn95);
			sb.append(",newColumn96=" + newColumn96);
			sb.append(",newColumn97=" + newColumn97);
			sb.append(",newColumn98=" + newColumn98);
			sb.append(",newColumn99=" + newColumn99);
			sb.append(",newColumn100=" + newColumn100);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rowPseudoStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rowStruct implements
			routines.system.IPersistableRow<rowStruct> {
		final static byte[] commonByteArrayLock_ELAN_Pseudonomize = new byte[0];
		static byte[] commonByteArray_ELAN_Pseudonomize = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String newColumn2;

		public String getNewColumn2() {
			return this.newColumn2;
		}

		public String newColumn3;

		public String getNewColumn3() {
			return this.newColumn3;
		}

		public String newColumn4;

		public String getNewColumn4() {
			return this.newColumn4;
		}

		public String newColumn5;

		public String getNewColumn5() {
			return this.newColumn5;
		}

		public String newColumn6;

		public String getNewColumn6() {
			return this.newColumn6;
		}

		public String newColumn7;

		public String getNewColumn7() {
			return this.newColumn7;
		}

		public String newColumn8;

		public String getNewColumn8() {
			return this.newColumn8;
		}

		public String newColumn9;

		public String getNewColumn9() {
			return this.newColumn9;
		}

		public String newColumn10;

		public String getNewColumn10() {
			return this.newColumn10;
		}

		public String newColumn11;

		public String getNewColumn11() {
			return this.newColumn11;
		}

		public String newColumn12;

		public String getNewColumn12() {
			return this.newColumn12;
		}

		public String newColumn13;

		public String getNewColumn13() {
			return this.newColumn13;
		}

		public String newColumn14;

		public String getNewColumn14() {
			return this.newColumn14;
		}

		public String newColumn15;

		public String getNewColumn15() {
			return this.newColumn15;
		}

		public String newColumn16;

		public String getNewColumn16() {
			return this.newColumn16;
		}

		public String newColumn17;

		public String getNewColumn17() {
			return this.newColumn17;
		}

		public String newColumn18;

		public String getNewColumn18() {
			return this.newColumn18;
		}

		public String newColumn19;

		public String getNewColumn19() {
			return this.newColumn19;
		}

		public String newColumn20;

		public String getNewColumn20() {
			return this.newColumn20;
		}

		public String newColumn21;

		public String getNewColumn21() {
			return this.newColumn21;
		}

		public String newColumn22;

		public String getNewColumn22() {
			return this.newColumn22;
		}

		public String newColumn23;

		public String getNewColumn23() {
			return this.newColumn23;
		}

		public String newColumn24;

		public String getNewColumn24() {
			return this.newColumn24;
		}

		public String newColumn25;

		public String getNewColumn25() {
			return this.newColumn25;
		}

		public String newColumn26;

		public String getNewColumn26() {
			return this.newColumn26;
		}

		public String newColumn27;

		public String getNewColumn27() {
			return this.newColumn27;
		}

		public String newColumn28;

		public String getNewColumn28() {
			return this.newColumn28;
		}

		public String newColumn29;

		public String getNewColumn29() {
			return this.newColumn29;
		}

		public String newColumn30;

		public String getNewColumn30() {
			return this.newColumn30;
		}

		public String newColumn31;

		public String getNewColumn31() {
			return this.newColumn31;
		}

		public String newColumn32;

		public String getNewColumn32() {
			return this.newColumn32;
		}

		public String newColumn33;

		public String getNewColumn33() {
			return this.newColumn33;
		}

		public String newColumn34;

		public String getNewColumn34() {
			return this.newColumn34;
		}

		public String newColumn35;

		public String getNewColumn35() {
			return this.newColumn35;
		}

		public String newColumn36;

		public String getNewColumn36() {
			return this.newColumn36;
		}

		public String newColumn37;

		public String getNewColumn37() {
			return this.newColumn37;
		}

		public String newColumn38;

		public String getNewColumn38() {
			return this.newColumn38;
		}

		public String newColumn39;

		public String getNewColumn39() {
			return this.newColumn39;
		}

		public String newColumn40;

		public String getNewColumn40() {
			return this.newColumn40;
		}

		public String newColumn41;

		public String getNewColumn41() {
			return this.newColumn41;
		}

		public String newColumn42;

		public String getNewColumn42() {
			return this.newColumn42;
		}

		public String newColumn43;

		public String getNewColumn43() {
			return this.newColumn43;
		}

		public String newColumn44;

		public String getNewColumn44() {
			return this.newColumn44;
		}

		public String newColumn45;

		public String getNewColumn45() {
			return this.newColumn45;
		}

		public String newColumn46;

		public String getNewColumn46() {
			return this.newColumn46;
		}

		public String newColumn47;

		public String getNewColumn47() {
			return this.newColumn47;
		}

		public String newColumn48;

		public String getNewColumn48() {
			return this.newColumn48;
		}

		public String newColumn49;

		public String getNewColumn49() {
			return this.newColumn49;
		}

		public String newColumn50;

		public String getNewColumn50() {
			return this.newColumn50;
		}

		public String newColumn51;

		public String getNewColumn51() {
			return this.newColumn51;
		}

		public String newColumn52;

		public String getNewColumn52() {
			return this.newColumn52;
		}

		public String newColumn53;

		public String getNewColumn53() {
			return this.newColumn53;
		}

		public String newColumn54;

		public String getNewColumn54() {
			return this.newColumn54;
		}

		public String newColumn55;

		public String getNewColumn55() {
			return this.newColumn55;
		}

		public String newColumn56;

		public String getNewColumn56() {
			return this.newColumn56;
		}

		public String newColumn57;

		public String getNewColumn57() {
			return this.newColumn57;
		}

		public String newColumn58;

		public String getNewColumn58() {
			return this.newColumn58;
		}

		public String newColumn59;

		public String getNewColumn59() {
			return this.newColumn59;
		}

		public String newColumn60;

		public String getNewColumn60() {
			return this.newColumn60;
		}

		public String newColumn61;

		public String getNewColumn61() {
			return this.newColumn61;
		}

		public String newColumn62;

		public String getNewColumn62() {
			return this.newColumn62;
		}

		public String newColumn63;

		public String getNewColumn63() {
			return this.newColumn63;
		}

		public String newColumn64;

		public String getNewColumn64() {
			return this.newColumn64;
		}

		public String newColumn65;

		public String getNewColumn65() {
			return this.newColumn65;
		}

		public String newColumn66;

		public String getNewColumn66() {
			return this.newColumn66;
		}

		public String newColumn67;

		public String getNewColumn67() {
			return this.newColumn67;
		}

		public String newColumn68;

		public String getNewColumn68() {
			return this.newColumn68;
		}

		public String newColumn69;

		public String getNewColumn69() {
			return this.newColumn69;
		}

		public String newColumn70;

		public String getNewColumn70() {
			return this.newColumn70;
		}

		public String newColumn71;

		public String getNewColumn71() {
			return this.newColumn71;
		}

		public String newColumn72;

		public String getNewColumn72() {
			return this.newColumn72;
		}

		public String newColumn73;

		public String getNewColumn73() {
			return this.newColumn73;
		}

		public String newColumn74;

		public String getNewColumn74() {
			return this.newColumn74;
		}

		public String newColumn75;

		public String getNewColumn75() {
			return this.newColumn75;
		}

		public String newColumn76;

		public String getNewColumn76() {
			return this.newColumn76;
		}

		public String newColumn77;

		public String getNewColumn77() {
			return this.newColumn77;
		}

		public String newColumn78;

		public String getNewColumn78() {
			return this.newColumn78;
		}

		public String newColumn79;

		public String getNewColumn79() {
			return this.newColumn79;
		}

		public String newColumn80;

		public String getNewColumn80() {
			return this.newColumn80;
		}

		public String newColumn81;

		public String getNewColumn81() {
			return this.newColumn81;
		}

		public String newColumn82;

		public String getNewColumn82() {
			return this.newColumn82;
		}

		public String newColumn83;

		public String getNewColumn83() {
			return this.newColumn83;
		}

		public String newColumn84;

		public String getNewColumn84() {
			return this.newColumn84;
		}

		public String newColumn85;

		public String getNewColumn85() {
			return this.newColumn85;
		}

		public String newColumn86;

		public String getNewColumn86() {
			return this.newColumn86;
		}

		public String newColumn87;

		public String getNewColumn87() {
			return this.newColumn87;
		}

		public String newColumn88;

		public String getNewColumn88() {
			return this.newColumn88;
		}

		public String newColumn89;

		public String getNewColumn89() {
			return this.newColumn89;
		}

		public String newColumn90;

		public String getNewColumn90() {
			return this.newColumn90;
		}

		public String newColumn91;

		public String getNewColumn91() {
			return this.newColumn91;
		}

		public String newColumn92;

		public String getNewColumn92() {
			return this.newColumn92;
		}

		public String newColumn93;

		public String getNewColumn93() {
			return this.newColumn93;
		}

		public String newColumn94;

		public String getNewColumn94() {
			return this.newColumn94;
		}

		public String newColumn95;

		public String getNewColumn95() {
			return this.newColumn95;
		}

		public String newColumn96;

		public String getNewColumn96() {
			return this.newColumn96;
		}

		public String newColumn97;

		public String getNewColumn97() {
			return this.newColumn97;
		}

		public String newColumn98;

		public String getNewColumn98() {
			return this.newColumn98;
		}

		public String newColumn99;

		public String getNewColumn99() {
			return this.newColumn99;
		}

		public String newColumn100;

		public String getNewColumn100() {
			return this.newColumn100;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ELAN_Pseudonomize.length) {
					if (length < 1024
							&& commonByteArray_ELAN_Pseudonomize.length == 0) {
						commonByteArray_ELAN_Pseudonomize = new byte[1024];
					} else {
						commonByteArray_ELAN_Pseudonomize = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ELAN_Pseudonomize, 0, length);
				strReturn = new String(commonByteArray_ELAN_Pseudonomize, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Pseudonomize) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.newColumn1 = readString(dis);

					this.newColumn2 = readString(dis);

					this.newColumn3 = readString(dis);

					this.newColumn4 = readString(dis);

					this.newColumn5 = readString(dis);

					this.newColumn6 = readString(dis);

					this.newColumn7 = readString(dis);

					this.newColumn8 = readString(dis);

					this.newColumn9 = readString(dis);

					this.newColumn10 = readString(dis);

					this.newColumn11 = readString(dis);

					this.newColumn12 = readString(dis);

					this.newColumn13 = readString(dis);

					this.newColumn14 = readString(dis);

					this.newColumn15 = readString(dis);

					this.newColumn16 = readString(dis);

					this.newColumn17 = readString(dis);

					this.newColumn18 = readString(dis);

					this.newColumn19 = readString(dis);

					this.newColumn20 = readString(dis);

					this.newColumn21 = readString(dis);

					this.newColumn22 = readString(dis);

					this.newColumn23 = readString(dis);

					this.newColumn24 = readString(dis);

					this.newColumn25 = readString(dis);

					this.newColumn26 = readString(dis);

					this.newColumn27 = readString(dis);

					this.newColumn28 = readString(dis);

					this.newColumn29 = readString(dis);

					this.newColumn30 = readString(dis);

					this.newColumn31 = readString(dis);

					this.newColumn32 = readString(dis);

					this.newColumn33 = readString(dis);

					this.newColumn34 = readString(dis);

					this.newColumn35 = readString(dis);

					this.newColumn36 = readString(dis);

					this.newColumn37 = readString(dis);

					this.newColumn38 = readString(dis);

					this.newColumn39 = readString(dis);

					this.newColumn40 = readString(dis);

					this.newColumn41 = readString(dis);

					this.newColumn42 = readString(dis);

					this.newColumn43 = readString(dis);

					this.newColumn44 = readString(dis);

					this.newColumn45 = readString(dis);

					this.newColumn46 = readString(dis);

					this.newColumn47 = readString(dis);

					this.newColumn48 = readString(dis);

					this.newColumn49 = readString(dis);

					this.newColumn50 = readString(dis);

					this.newColumn51 = readString(dis);

					this.newColumn52 = readString(dis);

					this.newColumn53 = readString(dis);

					this.newColumn54 = readString(dis);

					this.newColumn55 = readString(dis);

					this.newColumn56 = readString(dis);

					this.newColumn57 = readString(dis);

					this.newColumn58 = readString(dis);

					this.newColumn59 = readString(dis);

					this.newColumn60 = readString(dis);

					this.newColumn61 = readString(dis);

					this.newColumn62 = readString(dis);

					this.newColumn63 = readString(dis);

					this.newColumn64 = readString(dis);

					this.newColumn65 = readString(dis);

					this.newColumn66 = readString(dis);

					this.newColumn67 = readString(dis);

					this.newColumn68 = readString(dis);

					this.newColumn69 = readString(dis);

					this.newColumn70 = readString(dis);

					this.newColumn71 = readString(dis);

					this.newColumn72 = readString(dis);

					this.newColumn73 = readString(dis);

					this.newColumn74 = readString(dis);

					this.newColumn75 = readString(dis);

					this.newColumn76 = readString(dis);

					this.newColumn77 = readString(dis);

					this.newColumn78 = readString(dis);

					this.newColumn79 = readString(dis);

					this.newColumn80 = readString(dis);

					this.newColumn81 = readString(dis);

					this.newColumn82 = readString(dis);

					this.newColumn83 = readString(dis);

					this.newColumn84 = readString(dis);

					this.newColumn85 = readString(dis);

					this.newColumn86 = readString(dis);

					this.newColumn87 = readString(dis);

					this.newColumn88 = readString(dis);

					this.newColumn89 = readString(dis);

					this.newColumn90 = readString(dis);

					this.newColumn91 = readString(dis);

					this.newColumn92 = readString(dis);

					this.newColumn93 = readString(dis);

					this.newColumn94 = readString(dis);

					this.newColumn95 = readString(dis);

					this.newColumn96 = readString(dis);

					this.newColumn97 = readString(dis);

					this.newColumn98 = readString(dis);

					this.newColumn99 = readString(dis);

					this.newColumn100 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.newColumn2, dos);

				// String

				writeString(this.newColumn3, dos);

				// String

				writeString(this.newColumn4, dos);

				// String

				writeString(this.newColumn5, dos);

				// String

				writeString(this.newColumn6, dos);

				// String

				writeString(this.newColumn7, dos);

				// String

				writeString(this.newColumn8, dos);

				// String

				writeString(this.newColumn9, dos);

				// String

				writeString(this.newColumn10, dos);

				// String

				writeString(this.newColumn11, dos);

				// String

				writeString(this.newColumn12, dos);

				// String

				writeString(this.newColumn13, dos);

				// String

				writeString(this.newColumn14, dos);

				// String

				writeString(this.newColumn15, dos);

				// String

				writeString(this.newColumn16, dos);

				// String

				writeString(this.newColumn17, dos);

				// String

				writeString(this.newColumn18, dos);

				// String

				writeString(this.newColumn19, dos);

				// String

				writeString(this.newColumn20, dos);

				// String

				writeString(this.newColumn21, dos);

				// String

				writeString(this.newColumn22, dos);

				// String

				writeString(this.newColumn23, dos);

				// String

				writeString(this.newColumn24, dos);

				// String

				writeString(this.newColumn25, dos);

				// String

				writeString(this.newColumn26, dos);

				// String

				writeString(this.newColumn27, dos);

				// String

				writeString(this.newColumn28, dos);

				// String

				writeString(this.newColumn29, dos);

				// String

				writeString(this.newColumn30, dos);

				// String

				writeString(this.newColumn31, dos);

				// String

				writeString(this.newColumn32, dos);

				// String

				writeString(this.newColumn33, dos);

				// String

				writeString(this.newColumn34, dos);

				// String

				writeString(this.newColumn35, dos);

				// String

				writeString(this.newColumn36, dos);

				// String

				writeString(this.newColumn37, dos);

				// String

				writeString(this.newColumn38, dos);

				// String

				writeString(this.newColumn39, dos);

				// String

				writeString(this.newColumn40, dos);

				// String

				writeString(this.newColumn41, dos);

				// String

				writeString(this.newColumn42, dos);

				// String

				writeString(this.newColumn43, dos);

				// String

				writeString(this.newColumn44, dos);

				// String

				writeString(this.newColumn45, dos);

				// String

				writeString(this.newColumn46, dos);

				// String

				writeString(this.newColumn47, dos);

				// String

				writeString(this.newColumn48, dos);

				// String

				writeString(this.newColumn49, dos);

				// String

				writeString(this.newColumn50, dos);

				// String

				writeString(this.newColumn51, dos);

				// String

				writeString(this.newColumn52, dos);

				// String

				writeString(this.newColumn53, dos);

				// String

				writeString(this.newColumn54, dos);

				// String

				writeString(this.newColumn55, dos);

				// String

				writeString(this.newColumn56, dos);

				// String

				writeString(this.newColumn57, dos);

				// String

				writeString(this.newColumn58, dos);

				// String

				writeString(this.newColumn59, dos);

				// String

				writeString(this.newColumn60, dos);

				// String

				writeString(this.newColumn61, dos);

				// String

				writeString(this.newColumn62, dos);

				// String

				writeString(this.newColumn63, dos);

				// String

				writeString(this.newColumn64, dos);

				// String

				writeString(this.newColumn65, dos);

				// String

				writeString(this.newColumn66, dos);

				// String

				writeString(this.newColumn67, dos);

				// String

				writeString(this.newColumn68, dos);

				// String

				writeString(this.newColumn69, dos);

				// String

				writeString(this.newColumn70, dos);

				// String

				writeString(this.newColumn71, dos);

				// String

				writeString(this.newColumn72, dos);

				// String

				writeString(this.newColumn73, dos);

				// String

				writeString(this.newColumn74, dos);

				// String

				writeString(this.newColumn75, dos);

				// String

				writeString(this.newColumn76, dos);

				// String

				writeString(this.newColumn77, dos);

				// String

				writeString(this.newColumn78, dos);

				// String

				writeString(this.newColumn79, dos);

				// String

				writeString(this.newColumn80, dos);

				// String

				writeString(this.newColumn81, dos);

				// String

				writeString(this.newColumn82, dos);

				// String

				writeString(this.newColumn83, dos);

				// String

				writeString(this.newColumn84, dos);

				// String

				writeString(this.newColumn85, dos);

				// String

				writeString(this.newColumn86, dos);

				// String

				writeString(this.newColumn87, dos);

				// String

				writeString(this.newColumn88, dos);

				// String

				writeString(this.newColumn89, dos);

				// String

				writeString(this.newColumn90, dos);

				// String

				writeString(this.newColumn91, dos);

				// String

				writeString(this.newColumn92, dos);

				// String

				writeString(this.newColumn93, dos);

				// String

				writeString(this.newColumn94, dos);

				// String

				writeString(this.newColumn95, dos);

				// String

				writeString(this.newColumn96, dos);

				// String

				writeString(this.newColumn97, dos);

				// String

				writeString(this.newColumn98, dos);

				// String

				writeString(this.newColumn99, dos);

				// String

				writeString(this.newColumn100, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + newColumn2);
			sb.append(",newColumn3=" + newColumn3);
			sb.append(",newColumn4=" + newColumn4);
			sb.append(",newColumn5=" + newColumn5);
			sb.append(",newColumn6=" + newColumn6);
			sb.append(",newColumn7=" + newColumn7);
			sb.append(",newColumn8=" + newColumn8);
			sb.append(",newColumn9=" + newColumn9);
			sb.append(",newColumn10=" + newColumn10);
			sb.append(",newColumn11=" + newColumn11);
			sb.append(",newColumn12=" + newColumn12);
			sb.append(",newColumn13=" + newColumn13);
			sb.append(",newColumn14=" + newColumn14);
			sb.append(",newColumn15=" + newColumn15);
			sb.append(",newColumn16=" + newColumn16);
			sb.append(",newColumn17=" + newColumn17);
			sb.append(",newColumn18=" + newColumn18);
			sb.append(",newColumn19=" + newColumn19);
			sb.append(",newColumn20=" + newColumn20);
			sb.append(",newColumn21=" + newColumn21);
			sb.append(",newColumn22=" + newColumn22);
			sb.append(",newColumn23=" + newColumn23);
			sb.append(",newColumn24=" + newColumn24);
			sb.append(",newColumn25=" + newColumn25);
			sb.append(",newColumn26=" + newColumn26);
			sb.append(",newColumn27=" + newColumn27);
			sb.append(",newColumn28=" + newColumn28);
			sb.append(",newColumn29=" + newColumn29);
			sb.append(",newColumn30=" + newColumn30);
			sb.append(",newColumn31=" + newColumn31);
			sb.append(",newColumn32=" + newColumn32);
			sb.append(",newColumn33=" + newColumn33);
			sb.append(",newColumn34=" + newColumn34);
			sb.append(",newColumn35=" + newColumn35);
			sb.append(",newColumn36=" + newColumn36);
			sb.append(",newColumn37=" + newColumn37);
			sb.append(",newColumn38=" + newColumn38);
			sb.append(",newColumn39=" + newColumn39);
			sb.append(",newColumn40=" + newColumn40);
			sb.append(",newColumn41=" + newColumn41);
			sb.append(",newColumn42=" + newColumn42);
			sb.append(",newColumn43=" + newColumn43);
			sb.append(",newColumn44=" + newColumn44);
			sb.append(",newColumn45=" + newColumn45);
			sb.append(",newColumn46=" + newColumn46);
			sb.append(",newColumn47=" + newColumn47);
			sb.append(",newColumn48=" + newColumn48);
			sb.append(",newColumn49=" + newColumn49);
			sb.append(",newColumn50=" + newColumn50);
			sb.append(",newColumn51=" + newColumn51);
			sb.append(",newColumn52=" + newColumn52);
			sb.append(",newColumn53=" + newColumn53);
			sb.append(",newColumn54=" + newColumn54);
			sb.append(",newColumn55=" + newColumn55);
			sb.append(",newColumn56=" + newColumn56);
			sb.append(",newColumn57=" + newColumn57);
			sb.append(",newColumn58=" + newColumn58);
			sb.append(",newColumn59=" + newColumn59);
			sb.append(",newColumn60=" + newColumn60);
			sb.append(",newColumn61=" + newColumn61);
			sb.append(",newColumn62=" + newColumn62);
			sb.append(",newColumn63=" + newColumn63);
			sb.append(",newColumn64=" + newColumn64);
			sb.append(",newColumn65=" + newColumn65);
			sb.append(",newColumn66=" + newColumn66);
			sb.append(",newColumn67=" + newColumn67);
			sb.append(",newColumn68=" + newColumn68);
			sb.append(",newColumn69=" + newColumn69);
			sb.append(",newColumn70=" + newColumn70);
			sb.append(",newColumn71=" + newColumn71);
			sb.append(",newColumn72=" + newColumn72);
			sb.append(",newColumn73=" + newColumn73);
			sb.append(",newColumn74=" + newColumn74);
			sb.append(",newColumn75=" + newColumn75);
			sb.append(",newColumn76=" + newColumn76);
			sb.append(",newColumn77=" + newColumn77);
			sb.append(",newColumn78=" + newColumn78);
			sb.append(",newColumn79=" + newColumn79);
			sb.append(",newColumn80=" + newColumn80);
			sb.append(",newColumn81=" + newColumn81);
			sb.append(",newColumn82=" + newColumn82);
			sb.append(",newColumn83=" + newColumn83);
			sb.append(",newColumn84=" + newColumn84);
			sb.append(",newColumn85=" + newColumn85);
			sb.append(",newColumn86=" + newColumn86);
			sb.append(",newColumn87=" + newColumn87);
			sb.append(",newColumn88=" + newColumn88);
			sb.append(",newColumn89=" + newColumn89);
			sb.append(",newColumn90=" + newColumn90);
			sb.append(",newColumn91=" + newColumn91);
			sb.append(",newColumn92=" + newColumn92);
			sb.append(",newColumn93=" + newColumn93);
			sb.append(",newColumn94=" + newColumn94);
			sb.append(",newColumn95=" + newColumn95);
			sb.append(",newColumn96=" + newColumn96);
			sb.append(",newColumn97=" + newColumn97);
			sb.append(",newColumn98=" + newColumn98);
			sb.append(",newColumn99=" + newColumn99);
			sb.append(",newColumn100=" + newColumn100);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileList_1Struct implements
			routines.system.IPersistableRow<after_tFileList_1Struct> {
		final static byte[] commonByteArrayLock_ELAN_Pseudonomize = new byte[0];
		static byte[] commonByteArray_ELAN_Pseudonomize = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Pseudonomize) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileList_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tHashInput_1Process(globalMap);

				rowStruct row = new rowStruct();
				rowPseudoStruct rowPseudo = new rowPseudoStruct();
				nonNullRowsStruct nonNullRows = new nonNullRowsStruct();
				singleColumnRowStruct singleColumnRow = new singleColumnRowStruct();

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tJava_2 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.folder;
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add("*");
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler
							.globToPerl5(
									filemask_tFileList_1.toCharArray(),
									org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1);
					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
				java.io.File file_tFileList_1 = new java.io.File(
						directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(
										fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file
											.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file
												.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1
						.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1
							.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1
							.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1
							.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1
							.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".")
							&& files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1
								.getName().substring(
										files_tFileList_1.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE",
							currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */
					NB_ITERATE_tJava_2++;

					/**
					 * [tJava_2 begin ] start
					 */

					int NB_ITERATE_tFileInputDelimited_2 = 0; // for statistics

					ok_Hash.put("tJava_2", false);
					start_Hash.put("tJava_2", System.currentTimeMillis());

					currentComponent = "tJava_2";

					int tos_count_tJava_2 = 0;

					System.out.println("Re-encoding file "
							.concat((String) globalMap
									.get("tFileList_1_CURRENT_FILE")));

					Numeric.resetSequence("counter", 0);

					/**
					 * [tJava_2 begin ] stop
					 */

					/**
					 * [tJava_2 main ] start
					 */

					currentComponent = "tJava_2";

					tos_count_tJava_2++;

					/**
					 * [tJava_2 main ] stop
					 */
					NB_ITERATE_tFileInputDelimited_2++;

					/**
					 * [tFileOutputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_1", false);
					start_Hash.put("tFileOutputDelimited_1",
							System.currentTimeMillis());

					currentComponent = "tFileOutputDelimited_1";

					int tos_count_tFileOutputDelimited_1 = 0;

					String fileName_tFileOutputDelimited_1 = "";
					fileName_tFileOutputDelimited_1 = (new java.io.File(
							((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH"))
									.substring(
											0,
											((String) globalMap
													.get("tFileList_1_CURRENT_FILEPATH"))
													.lastIndexOf("."))
									.concat("-pseudo.")
									.concat(((String) globalMap
											.get("tFileList_1_CURRENT_FILEEXTENSION")))))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_1 = null;
					String extension_tFileOutputDelimited_1 = null;
					String directory_tFileOutputDelimited_1 = null;
					if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
							extension_tFileOutputDelimited_1 = "";
						} else {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
							extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(fileName_tFileOutputDelimited_1
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
							extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(fileName_tFileOutputDelimited_1
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
							extension_tFileOutputDelimited_1 = "";
						}
						directory_tFileOutputDelimited_1 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_1 = true;
					java.io.File filetFileOutputDelimited_1 = new java.io.File(
							fileName_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
					int nb_line_tFileOutputDelimited_1 = 0;
					int splitEvery_tFileOutputDelimited_1 = 1000;
					int splitedFileNo_tFileOutputDelimited_1 = 0;
					int currentRow_tFileOutputDelimited_1 = 0;

					final String OUT_DELIM_tFileOutputDelimited_1 = /**
					 * Start
					 * field tFileOutputDelimited_1:FIELDSEPARATOR
					 */
					context.separator == null || context.separator.isEmpty() ? "\t"
							: context.separator/**
					 * End field
					 * tFileOutputDelimited_1:FIELDSEPARATOR
					 */
					;

					final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
					 * 
					 * Start field tFileOutputDelimited_1:ROWSEPARATOR
					 */
					"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
					;

					// create directory only if not exists
					if (directory_tFileOutputDelimited_1 != null
							&& directory_tFileOutputDelimited_1.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
								directory_tFileOutputDelimited_1);
						if (!dir_tFileOutputDelimited_1.exists()) {
							dir_tFileOutputDelimited_1.mkdirs();
						}
					}

					// routines.system.Row
					java.io.Writer outtFileOutputDelimited_1 = null;

					java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
							fileName_tFileOutputDelimited_1);
					if (fileToDelete_tFileOutputDelimited_1.exists()) {
						fileToDelete_tFileOutputDelimited_1.delete();
					}
					outtFileOutputDelimited_1 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_1,
											false), "UTF-8"));

					resourceMap.put("out_tFileOutputDelimited_1",
							outtFileOutputDelimited_1);
					resourceMap.put("nb_line_tFileOutputDelimited_1",
							nb_line_tFileOutputDelimited_1);

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tJavaRow_1 begin ] start
					 */

					ok_Hash.put("tJavaRow_1", false);
					start_Hash.put("tJavaRow_1", System.currentTimeMillis());

					currentComponent = "tJavaRow_1";

					int tos_count_tJavaRow_1 = 0;

					int nb_line_tJavaRow_1 = 0;

					/**
					 * [tJavaRow_1 begin ] stop
					 */

					/**
					 * [tFilterRow_1 begin ] start
					 */

					ok_Hash.put("tFilterRow_1", false);
					start_Hash.put("tFilterRow_1", System.currentTimeMillis());

					currentComponent = "tFilterRow_1";

					int tos_count_tFilterRow_1 = 0;

					int nb_line_tFilterRow_1 = 0;
					int nb_line_ok_tFilterRow_1 = 0;
					int nb_line_reject_tFilterRow_1 = 0;

					class Operator_tFilterRow_1 {
						private String sErrorMsg = "";
						private boolean bMatchFlag = true;
						private String sUnionFlag = "&&";

						public Operator_tFilterRow_1(String unionFlag) {
							sUnionFlag = unionFlag;
							bMatchFlag = "||".equals(unionFlag) ? false : true;
						}

						public String getErrorMsg() {
							if (sErrorMsg != null && sErrorMsg.length() > 1)
								return sErrorMsg.substring(1);
							else
								return null;
						}

						public boolean getMatchFlag() {
							return bMatchFlag;
						}

						public void matches(boolean partMatched, String reason) {
							// no need to care about the next judgement
							if ("||".equals(sUnionFlag) && bMatchFlag) {
								return;
							}

							if (!partMatched) {
								sErrorMsg += "|" + reason;
							}

							if ("||".equals(sUnionFlag))
								bMatchFlag = bMatchFlag || partMatched;
							else
								bMatchFlag = bMatchFlag && partMatched;
						}
					}

					/**
					 * [tFilterRow_1 begin ] stop
					 */

					/**
					 * [tMap_2 begin ] start
					 */

					ok_Hash.put("tMap_2", false);
					start_Hash.put("tMap_2", System.currentTimeMillis());

					currentComponent = "tMap_2";

					int tos_count_tMap_2 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookUpIDsStruct> tHash_Lookup_lookUpIDs = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookUpIDsStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookUpIDsStruct>) globalMap
							.get("tHash_Lookup_lookUpIDs"));

					lookUpIDsStruct lookUpIDsHashKey = new lookUpIDsStruct();
					lookUpIDsStruct lookUpIDsDefault = new lookUpIDsStruct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_2__Struct {
						Integer counter;
					}
					Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					rowPseudoStruct rowPseudo_tmp = new rowPseudoStruct();
					// ###############################

					/**
					 * [tMap_2 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_2 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_2", false);
					start_Hash.put("tFileInputDelimited_2",
							System.currentTimeMillis());

					currentComponent = "tFileInputDelimited_2";

					int tos_count_tFileInputDelimited_2 = 0;

					final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

					class RowHelper_tFileInputDelimited_2 {

						public void valueToConn_0(
								org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2,
								rowStruct row) throws java.lang.Exception {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row.id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row.newColumn1 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row.newColumn2 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row.newColumn3 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row.newColumn4 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row.newColumn5 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							row.newColumn6 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							row.newColumn7 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							row.newColumn8 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 9;

							row.newColumn9 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 10;

							row.newColumn10 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 11;

							row.newColumn11 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 12;

							row.newColumn12 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 13;

							row.newColumn13 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 14;

							row.newColumn14 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 15;

							row.newColumn15 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 16;

							row.newColumn16 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 17;

							row.newColumn17 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 18;

							row.newColumn18 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 19;

							row.newColumn19 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 20;

							row.newColumn20 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 21;

							row.newColumn21 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 22;

							row.newColumn22 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 23;

							row.newColumn23 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 24;

							row.newColumn24 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 25;

							row.newColumn25 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 26;

							row.newColumn26 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 27;

							row.newColumn27 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 28;

							row.newColumn28 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 29;

							row.newColumn29 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 30;

							row.newColumn30 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 31;

							row.newColumn31 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 32;

							row.newColumn32 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 33;

							row.newColumn33 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 34;

							row.newColumn34 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 35;

							row.newColumn35 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 36;

							row.newColumn36 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 37;

							row.newColumn37 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 38;

							row.newColumn38 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 39;

							row.newColumn39 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 40;

							row.newColumn40 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 41;

							row.newColumn41 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 42;

							row.newColumn42 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 43;

							row.newColumn43 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 44;

							row.newColumn44 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 45;

							row.newColumn45 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 46;

							row.newColumn46 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 47;

							row.newColumn47 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 48;

							row.newColumn48 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 49;

							row.newColumn49 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 50;

							row.newColumn50 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 51;

							row.newColumn51 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 52;

							row.newColumn52 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 53;

							row.newColumn53 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 54;

							row.newColumn54 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 55;

							row.newColumn55 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 56;

							row.newColumn56 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 57;

							row.newColumn57 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 58;

							row.newColumn58 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 59;

							row.newColumn59 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 60;

							row.newColumn60 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 61;

							row.newColumn61 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 62;

							row.newColumn62 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 63;

							row.newColumn63 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 64;

							row.newColumn64 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 65;

							row.newColumn65 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 66;

							row.newColumn66 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 67;

							row.newColumn67 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 68;

							row.newColumn68 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 69;

							row.newColumn69 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 70;

							row.newColumn70 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 71;

							row.newColumn71 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 72;

							row.newColumn72 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 73;

							row.newColumn73 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 74;

							row.newColumn74 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 75;

							row.newColumn75 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 76;

							row.newColumn76 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 77;

							row.newColumn77 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 78;

							row.newColumn78 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 79;

							row.newColumn79 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 80;

							row.newColumn80 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 81;

							row.newColumn81 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 82;

							row.newColumn82 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 83;

							row.newColumn83 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 84;

							row.newColumn84 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 85;

							row.newColumn85 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 86;

							row.newColumn86 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 87;

							row.newColumn87 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 88;

							row.newColumn88 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 89;

							row.newColumn89 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 90;

							row.newColumn90 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 91;

							row.newColumn91 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 92;

							row.newColumn92 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 93;

							row.newColumn93 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 94;

							row.newColumn94 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 95;

							row.newColumn95 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 96;

							row.newColumn96 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 97;

							row.newColumn97 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 98;

							row.newColumn98 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 99;

							row.newColumn99 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

						}

						public void valueToConn_1(
								org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2,
								rowStruct row) throws java.lang.Exception {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 100;

							row.newColumn100 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

						}

						public void valueToConn(
								org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2,
								rowStruct row) throws java.lang.Exception {

							valueToConn_0(fid_tFileInputDelimited_2, row);

							valueToConn_1(fid_tFileInputDelimited_2, row);

						}

					}
					RowHelper_tFileInputDelimited_2 rowHelper_tFileInputDelimited_2 = new RowHelper_tFileInputDelimited_2();

					int nb_line_tFileInputDelimited_2 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
					try {

						Object filename_tFileInputDelimited_2 = (String) globalMap
								.get("tFileList_1_CURRENT_FILEPATH");
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
							if (footer_value_tFileInputDelimited_2 > 0
									|| random_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
									(String) globalMap
											.get("tFileList_1_CURRENT_FILEPATH"),
									"UTF-8",
									context.separator == null
											|| context.separator.isEmpty() ? "\t"
											: context.separator, "\n", false,
									0, 0, -1, -1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_2 != null
								&& fid_tFileInputDelimited_2.nextRecord()) {
							rowstate_tFileInputDelimited_2.reset();

							row = null;

							boolean whetherReject_tFileInputDelimited_2 = false;
							row = new rowStruct();
							try {

								rowHelper_tFileInputDelimited_2.valueToConn(
										fid_tFileInputDelimited_2, row);

								if (rowstate_tFileInputDelimited_2
										.getException() != null) {
									throw rowstate_tFileInputDelimited_2
											.getException();
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_2 = true;

								System.err.println(e.getMessage());
								row = null;

							}

							/**
							 * [tFileInputDelimited_2 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_2 main ] start
							 */

							currentComponent = "tFileInputDelimited_2";

							tos_count_tFileInputDelimited_2++;

							/**
							 * [tFileInputDelimited_2 main ] stop
							 */
							// Start of branch "row"
							if (row != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "lookUpIDs"
								// /////////////////////////////////////////////

								boolean forceLooplookUpIDs = false;

								lookUpIDsStruct lookUpIDsObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									lookUpIDsHashKey.pseudo = row.id;

									lookUpIDsHashKey.hashCodeDirty = true;

									tHash_Lookup_lookUpIDs
											.lookup(lookUpIDsHashKey);

								} // G_TM_M_020

								if (tHash_Lookup_lookUpIDs != null
										&& tHash_Lookup_lookUpIDs
												.getCount(lookUpIDsHashKey) > 1) { // G
																					// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'lookUpIDs' and it contains more one result from keys :  lookUpIDs.pseudo = '"
									// + lookUpIDsHashKey.pseudo + "'");
								} // G 071

								lookUpIDsStruct lookUpIDs = null;

								lookUpIDsStruct fromLookup_lookUpIDs = null;
								lookUpIDs = lookUpIDsDefault;

								if (tHash_Lookup_lookUpIDs != null
										&& tHash_Lookup_lookUpIDs.hasNext()) { // G
																				// 099

									fromLookup_lookUpIDs = tHash_Lookup_lookUpIDs
											.next();

								} // G 099

								if (fromLookup_lookUpIDs != null) {
									lookUpIDs = fromLookup_lookUpIDs;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;
									Var.counter = Numeric.sequence("counter",
											1, 1);// ###############################
									// ###############################
									// # Output tables

									rowPseudo = null;

									// # Output table : 'rowPseudo'
									rowPseudo_tmp.id = (Var.counter == 1 && (context.header == null || context.header
											.equalsIgnoreCase("Y"))) ? row.id
											: String.valueOf(lookUpIDs.id);
									rowPseudo_tmp.newColumn1 = row.newColumn1;
									rowPseudo_tmp.newColumn2 = row.newColumn2;
									rowPseudo_tmp.newColumn3 = row.newColumn3;
									rowPseudo_tmp.newColumn4 = row.newColumn4;
									rowPseudo_tmp.newColumn5 = row.newColumn5;
									rowPseudo_tmp.newColumn6 = row.newColumn6;
									rowPseudo_tmp.newColumn7 = row.newColumn7;
									rowPseudo_tmp.newColumn8 = row.newColumn8;
									rowPseudo_tmp.newColumn9 = row.newColumn9;
									rowPseudo_tmp.newColumn10 = row.newColumn10;
									rowPseudo_tmp.newColumn11 = row.newColumn11;
									rowPseudo_tmp.newColumn12 = row.newColumn12;
									rowPseudo_tmp.newColumn13 = row.newColumn13;
									rowPseudo_tmp.newColumn14 = row.newColumn14;
									rowPseudo_tmp.newColumn15 = row.newColumn15;
									rowPseudo_tmp.newColumn16 = row.newColumn16;
									rowPseudo_tmp.newColumn17 = row.newColumn17;
									rowPseudo_tmp.newColumn18 = row.newColumn18;
									rowPseudo_tmp.newColumn19 = row.newColumn19;
									rowPseudo_tmp.newColumn20 = row.newColumn20;
									rowPseudo_tmp.newColumn21 = row.newColumn21;
									rowPseudo_tmp.newColumn22 = row.newColumn22;
									rowPseudo_tmp.newColumn23 = row.newColumn23;
									rowPseudo_tmp.newColumn24 = row.newColumn24;
									rowPseudo_tmp.newColumn25 = row.newColumn25;
									rowPseudo_tmp.newColumn26 = row.newColumn26;
									rowPseudo_tmp.newColumn27 = row.newColumn27;
									rowPseudo_tmp.newColumn28 = row.newColumn28;
									rowPseudo_tmp.newColumn29 = row.newColumn29;
									rowPseudo_tmp.newColumn30 = row.newColumn30;
									rowPseudo_tmp.newColumn31 = row.newColumn31;
									rowPseudo_tmp.newColumn32 = row.newColumn32;
									rowPseudo_tmp.newColumn33 = row.newColumn33;
									rowPseudo_tmp.newColumn34 = row.newColumn34;
									rowPseudo_tmp.newColumn35 = row.newColumn35;
									rowPseudo_tmp.newColumn36 = row.newColumn36;
									rowPseudo_tmp.newColumn37 = row.newColumn37;
									rowPseudo_tmp.newColumn38 = row.newColumn38;
									rowPseudo_tmp.newColumn39 = row.newColumn39;
									rowPseudo_tmp.newColumn40 = row.newColumn40;
									rowPseudo_tmp.newColumn41 = row.newColumn41;
									rowPseudo_tmp.newColumn42 = row.newColumn42;
									rowPseudo_tmp.newColumn43 = row.newColumn43;
									rowPseudo_tmp.newColumn44 = row.newColumn44;
									rowPseudo_tmp.newColumn45 = row.newColumn45;
									rowPseudo_tmp.newColumn46 = row.newColumn46;
									rowPseudo_tmp.newColumn47 = row.newColumn47;
									rowPseudo_tmp.newColumn48 = row.newColumn48;
									rowPseudo_tmp.newColumn49 = row.newColumn49;
									rowPseudo_tmp.newColumn50 = row.newColumn50;
									rowPseudo_tmp.newColumn51 = row.newColumn51;
									rowPseudo_tmp.newColumn52 = row.newColumn52;
									rowPseudo_tmp.newColumn53 = row.newColumn53;
									rowPseudo_tmp.newColumn54 = row.newColumn54;
									rowPseudo_tmp.newColumn55 = row.newColumn55;
									rowPseudo_tmp.newColumn56 = row.newColumn56;
									rowPseudo_tmp.newColumn57 = row.newColumn57;
									rowPseudo_tmp.newColumn58 = row.newColumn58;
									rowPseudo_tmp.newColumn59 = row.newColumn59;
									rowPseudo_tmp.newColumn60 = row.newColumn60;
									rowPseudo_tmp.newColumn61 = row.newColumn61;
									rowPseudo_tmp.newColumn62 = row.newColumn62;
									rowPseudo_tmp.newColumn63 = row.newColumn63;
									rowPseudo_tmp.newColumn64 = row.newColumn64;
									rowPseudo_tmp.newColumn65 = row.newColumn65;
									rowPseudo_tmp.newColumn66 = row.newColumn66;
									rowPseudo_tmp.newColumn67 = row.newColumn67;
									rowPseudo_tmp.newColumn68 = row.newColumn68;
									rowPseudo_tmp.newColumn69 = row.newColumn69;
									rowPseudo_tmp.newColumn70 = row.newColumn70;
									rowPseudo_tmp.newColumn71 = row.newColumn71;
									rowPseudo_tmp.newColumn72 = row.newColumn72;
									rowPseudo_tmp.newColumn73 = row.newColumn73;
									rowPseudo_tmp.newColumn74 = row.newColumn74;
									rowPseudo_tmp.newColumn75 = row.newColumn75;
									rowPseudo_tmp.newColumn76 = row.newColumn76;
									rowPseudo_tmp.newColumn77 = row.newColumn77;
									rowPseudo_tmp.newColumn78 = row.newColumn78;
									rowPseudo_tmp.newColumn79 = row.newColumn79;
									rowPseudo_tmp.newColumn80 = row.newColumn80;
									rowPseudo_tmp.newColumn81 = row.newColumn81;
									rowPseudo_tmp.newColumn82 = row.newColumn82;
									rowPseudo_tmp.newColumn83 = row.newColumn83;
									rowPseudo_tmp.newColumn84 = row.newColumn84;
									rowPseudo_tmp.newColumn85 = row.newColumn85;
									rowPseudo_tmp.newColumn86 = row.newColumn86;
									rowPseudo_tmp.newColumn87 = row.newColumn87;
									rowPseudo_tmp.newColumn88 = row.newColumn88;
									rowPseudo_tmp.newColumn89 = row.newColumn89;
									rowPseudo_tmp.newColumn90 = row.newColumn90;
									rowPseudo_tmp.newColumn91 = row.newColumn91;
									rowPseudo_tmp.newColumn92 = row.newColumn92;
									rowPseudo_tmp.newColumn93 = row.newColumn93;
									rowPseudo_tmp.newColumn94 = row.newColumn94;
									rowPseudo_tmp.newColumn95 = row.newColumn95;
									rowPseudo_tmp.newColumn96 = row.newColumn96;
									rowPseudo_tmp.newColumn97 = row.newColumn97;
									rowPseudo_tmp.newColumn98 = row.newColumn98;
									rowPseudo_tmp.newColumn99 = row.newColumn99;
									rowPseudo_tmp.newColumn100 = row.newColumn100;
									rowPseudo = rowPseudo_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "rowPseudo"
								if (rowPseudo != null) {

									/**
									 * [tFilterRow_1 main ] start
									 */

									currentComponent = "tFilterRow_1";

									nonNullRows = null;
									Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
											"&&");
									ope_tFilterRow_1
											.matches(
													(rowPseudo.id == null ? false
															: rowPseudo.id
																	.compareTo("0") != 0),
													"id.compareTo(\"0\") != 0 failed");

									if (ope_tFilterRow_1.getMatchFlag()) {
										if (nonNullRows == null) {
											nonNullRows = new nonNullRowsStruct();
										}
										nonNullRows.id = rowPseudo.id;
										nonNullRows.newColumn1 = rowPseudo.newColumn1;
										nonNullRows.newColumn2 = rowPseudo.newColumn2;
										nonNullRows.newColumn3 = rowPseudo.newColumn3;
										nonNullRows.newColumn4 = rowPseudo.newColumn4;
										nonNullRows.newColumn5 = rowPseudo.newColumn5;
										nonNullRows.newColumn6 = rowPseudo.newColumn6;
										nonNullRows.newColumn7 = rowPseudo.newColumn7;
										nonNullRows.newColumn8 = rowPseudo.newColumn8;
										nonNullRows.newColumn9 = rowPseudo.newColumn9;
										nonNullRows.newColumn10 = rowPseudo.newColumn10;
										nonNullRows.newColumn11 = rowPseudo.newColumn11;
										nonNullRows.newColumn12 = rowPseudo.newColumn12;
										nonNullRows.newColumn13 = rowPseudo.newColumn13;
										nonNullRows.newColumn14 = rowPseudo.newColumn14;
										nonNullRows.newColumn15 = rowPseudo.newColumn15;
										nonNullRows.newColumn16 = rowPseudo.newColumn16;
										nonNullRows.newColumn17 = rowPseudo.newColumn17;
										nonNullRows.newColumn18 = rowPseudo.newColumn18;
										nonNullRows.newColumn19 = rowPseudo.newColumn19;
										nonNullRows.newColumn20 = rowPseudo.newColumn20;
										nonNullRows.newColumn21 = rowPseudo.newColumn21;
										nonNullRows.newColumn22 = rowPseudo.newColumn22;
										nonNullRows.newColumn23 = rowPseudo.newColumn23;
										nonNullRows.newColumn24 = rowPseudo.newColumn24;
										nonNullRows.newColumn25 = rowPseudo.newColumn25;
										nonNullRows.newColumn26 = rowPseudo.newColumn26;
										nonNullRows.newColumn27 = rowPseudo.newColumn27;
										nonNullRows.newColumn28 = rowPseudo.newColumn28;
										nonNullRows.newColumn29 = rowPseudo.newColumn29;
										nonNullRows.newColumn30 = rowPseudo.newColumn30;
										nonNullRows.newColumn31 = rowPseudo.newColumn31;
										nonNullRows.newColumn32 = rowPseudo.newColumn32;
										nonNullRows.newColumn33 = rowPseudo.newColumn33;
										nonNullRows.newColumn34 = rowPseudo.newColumn34;
										nonNullRows.newColumn35 = rowPseudo.newColumn35;
										nonNullRows.newColumn36 = rowPseudo.newColumn36;
										nonNullRows.newColumn37 = rowPseudo.newColumn37;
										nonNullRows.newColumn38 = rowPseudo.newColumn38;
										nonNullRows.newColumn39 = rowPseudo.newColumn39;
										nonNullRows.newColumn40 = rowPseudo.newColumn40;
										nonNullRows.newColumn41 = rowPseudo.newColumn41;
										nonNullRows.newColumn42 = rowPseudo.newColumn42;
										nonNullRows.newColumn43 = rowPseudo.newColumn43;
										nonNullRows.newColumn44 = rowPseudo.newColumn44;
										nonNullRows.newColumn45 = rowPseudo.newColumn45;
										nonNullRows.newColumn46 = rowPseudo.newColumn46;
										nonNullRows.newColumn47 = rowPseudo.newColumn47;
										nonNullRows.newColumn48 = rowPseudo.newColumn48;
										nonNullRows.newColumn49 = rowPseudo.newColumn49;
										nonNullRows.newColumn50 = rowPseudo.newColumn50;
										nonNullRows.newColumn51 = rowPseudo.newColumn51;
										nonNullRows.newColumn52 = rowPseudo.newColumn52;
										nonNullRows.newColumn53 = rowPseudo.newColumn53;
										nonNullRows.newColumn54 = rowPseudo.newColumn54;
										nonNullRows.newColumn55 = rowPseudo.newColumn55;
										nonNullRows.newColumn56 = rowPseudo.newColumn56;
										nonNullRows.newColumn57 = rowPseudo.newColumn57;
										nonNullRows.newColumn58 = rowPseudo.newColumn58;
										nonNullRows.newColumn59 = rowPseudo.newColumn59;
										nonNullRows.newColumn60 = rowPseudo.newColumn60;
										nonNullRows.newColumn61 = rowPseudo.newColumn61;
										nonNullRows.newColumn62 = rowPseudo.newColumn62;
										nonNullRows.newColumn63 = rowPseudo.newColumn63;
										nonNullRows.newColumn64 = rowPseudo.newColumn64;
										nonNullRows.newColumn65 = rowPseudo.newColumn65;
										nonNullRows.newColumn66 = rowPseudo.newColumn66;
										nonNullRows.newColumn67 = rowPseudo.newColumn67;
										nonNullRows.newColumn68 = rowPseudo.newColumn68;
										nonNullRows.newColumn69 = rowPseudo.newColumn69;
										nonNullRows.newColumn70 = rowPseudo.newColumn70;
										nonNullRows.newColumn71 = rowPseudo.newColumn71;
										nonNullRows.newColumn72 = rowPseudo.newColumn72;
										nonNullRows.newColumn73 = rowPseudo.newColumn73;
										nonNullRows.newColumn74 = rowPseudo.newColumn74;
										nonNullRows.newColumn75 = rowPseudo.newColumn75;
										nonNullRows.newColumn76 = rowPseudo.newColumn76;
										nonNullRows.newColumn77 = rowPseudo.newColumn77;
										nonNullRows.newColumn78 = rowPseudo.newColumn78;
										nonNullRows.newColumn79 = rowPseudo.newColumn79;
										nonNullRows.newColumn80 = rowPseudo.newColumn80;
										nonNullRows.newColumn81 = rowPseudo.newColumn81;
										nonNullRows.newColumn82 = rowPseudo.newColumn82;
										nonNullRows.newColumn83 = rowPseudo.newColumn83;
										nonNullRows.newColumn84 = rowPseudo.newColumn84;
										nonNullRows.newColumn85 = rowPseudo.newColumn85;
										nonNullRows.newColumn86 = rowPseudo.newColumn86;
										nonNullRows.newColumn87 = rowPseudo.newColumn87;
										nonNullRows.newColumn88 = rowPseudo.newColumn88;
										nonNullRows.newColumn89 = rowPseudo.newColumn89;
										nonNullRows.newColumn90 = rowPseudo.newColumn90;
										nonNullRows.newColumn91 = rowPseudo.newColumn91;
										nonNullRows.newColumn92 = rowPseudo.newColumn92;
										nonNullRows.newColumn93 = rowPseudo.newColumn93;
										nonNullRows.newColumn94 = rowPseudo.newColumn94;
										nonNullRows.newColumn95 = rowPseudo.newColumn95;
										nonNullRows.newColumn96 = rowPseudo.newColumn96;
										nonNullRows.newColumn97 = rowPseudo.newColumn97;
										nonNullRows.newColumn98 = rowPseudo.newColumn98;
										nonNullRows.newColumn99 = rowPseudo.newColumn99;
										nonNullRows.newColumn100 = rowPseudo.newColumn100;
										nb_line_ok_tFilterRow_1++;
									} else {
										nb_line_reject_tFilterRow_1++;
									}

									nb_line_tFilterRow_1++;

									tos_count_tFilterRow_1++;

									/**
									 * [tFilterRow_1 main ] stop
									 */
									// Start of branch "nonNullRows"
									if (nonNullRows != null) {

										/**
										 * [tJavaRow_1 main ] start
										 */

										currentComponent = "tJavaRow_1";

										ArrayList<String> values = new ArrayList<String>();

										values.add(nonNullRows.getId());

										for (int i = 1; i < 101; i++) {
											Object o = nonNullRows
													.getClass()
													.getDeclaredMethod(
															"getNewColumn"
																	.concat(String
																			.valueOf(i)))
													.invoke(nonNullRows);
											String s = o.toString();

											if (context.dateFormat != null
													&& !context.dateFormat
															.isEmpty()) {
												// SimpleDateFormat dateFormat =
												// new
												// SimpleDateFormat(context.dateFormat);
												try {
													((Calendar) globalMap
															.get("calendar"))
															.setTime(((SimpleDateFormat) globalMap
																	.get("dateFormat"))
																	.parse(s));
													((Calendar) globalMap
															.get("calendar"))
															.add(Calendar.DATE,
																	(int) globalMap
																			.get("days"));
													s = ((SimpleDateFormat) globalMap
															.get("dateFormat"))
															.format(((Calendar) globalMap
																	.get("calendar"))
																	.getTime());
												} catch (ParseException e) {
												}
											}

											values.add(s);
										}

										singleColumnRow.value = String
												.join((context.separator.isEmpty() ? "\t"
														: context.separator),
														values)
												.replaceFirst(
														"[".concat(
																(context.separator
																		.isEmpty() ? "\\t"
																		: context.separator))
																.concat("]+$"),
														"");
										nb_line_tJavaRow_1++;

										tos_count_tJavaRow_1++;

										/**
										 * [tJavaRow_1 main ] stop
										 */

										/**
										 * [tFileOutputDelimited_1 main ] start
										 */

										currentComponent = "tFileOutputDelimited_1";

										StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
										if (singleColumnRow.value != null) {
											sb_tFileOutputDelimited_1
													.append(singleColumnRow.value);
										}
										sb_tFileOutputDelimited_1
												.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

										nb_line_tFileOutputDelimited_1++;
										resourceMap
												.put("nb_line_tFileOutputDelimited_1",
														nb_line_tFileOutputDelimited_1);

										outtFileOutputDelimited_1
												.write(sb_tFileOutputDelimited_1
														.toString());

										tos_count_tFileOutputDelimited_1++;

										/**
										 * [tFileOutputDelimited_1 main ] stop
										 */

									} // End of branch "nonNullRows"

								} // End of branch "rowPseudo"

							} // End of branch "row"

							/**
							 * [tFileInputDelimited_2 end ] start
							 */

							currentComponent = "tFileInputDelimited_2";

						}
					} finally {
						if (!((Object) ((String) globalMap
								.get("tFileList_1_CURRENT_FILEPATH")) instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_2 != null) {
								fid_tFileInputDelimited_2.close();
							}
						}
						if (fid_tFileInputDelimited_2 != null) {
							globalMap.put("tFileInputDelimited_2_NB_LINE",
									fid_tFileInputDelimited_2.getRowNumber());

						}
					}

					ok_Hash.put("tFileInputDelimited_2", true);
					end_Hash.put("tFileInputDelimited_2",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_2 end ] stop
					 */

					/**
					 * [tMap_2 end ] start
					 */

					currentComponent = "tMap_2";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_2", true);
					end_Hash.put("tMap_2", System.currentTimeMillis());

					/**
					 * [tMap_2 end ] stop
					 */

					/**
					 * [tFilterRow_1 end ] start
					 */

					currentComponent = "tFilterRow_1";

					globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
					globalMap.put("tFilterRow_1_NB_LINE_OK",
							nb_line_ok_tFilterRow_1);
					globalMap.put("tFilterRow_1_NB_LINE_REJECT",
							nb_line_reject_tFilterRow_1);

					ok_Hash.put("tFilterRow_1", true);
					end_Hash.put("tFilterRow_1", System.currentTimeMillis());

					/**
					 * [tFilterRow_1 end ] stop
					 */

					/**
					 * [tJavaRow_1 end ] start
					 */

					currentComponent = "tJavaRow_1";

					globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

					ok_Hash.put("tJavaRow_1", true);
					end_Hash.put("tJavaRow_1", System.currentTimeMillis());

					/**
					 * [tJavaRow_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);

					resourceMap.put("finish_tFileOutputDelimited_1", true);

					ok_Hash.put("tFileOutputDelimited_1", true);
					end_Hash.put("tFileOutputDelimited_1",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_1 end ] stop
					 */

					/**
					 * [tJava_2 end ] start
					 */

					currentComponent = "tJava_2";

					ok_Hash.put("tJava_2", true);
					end_Hash.put("tJava_2", System.currentTimeMillis());

					/**
					 * [tJava_2 end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				if (context.saveMapping != null
						&& context.saveMapping.equalsIgnoreCase("Y")) {

					tJava_4Process(globalMap);
				}

				if (context.saveMapping == null
						|| !context.saveMapping.equalsIgnoreCase("Y")) {

					tJava_3Process(globalMap);
				}

				/**
				 * [tFileList_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_lookUpIDs");

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				System.out.println("Saving ID mapping...");

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tHashInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public static class idMapStruct implements
			routines.system.IPersistableRow<idMapStruct> {
		final static byte[] commonByteArrayLock_ELAN_Pseudonomize = new byte[0];
		static byte[] commonByteArray_ELAN_Pseudonomize = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String pseudo;

		public String getPseudo() {
			return this.pseudo;
		}

		public int id;

		public int getId() {
			return this.id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.pseudo == null) ? 0 : this.pseudo.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final idMapStruct other = (idMapStruct) obj;

			if (this.pseudo == null) {
				if (other.pseudo != null)
					return false;

			} else if (!this.pseudo.equals(other.pseudo))

				return false;

			return true;
		}

		public void copyDataTo(idMapStruct other) {

			other.pseudo = this.pseudo;
			other.id = this.id;

		}

		public void copyKeysDataTo(idMapStruct other) {

			other.pseudo = this.pseudo;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ELAN_Pseudonomize.length) {
					if (length < 1024
							&& commonByteArray_ELAN_Pseudonomize.length == 0) {
						commonByteArray_ELAN_Pseudonomize = new byte[1024];
					} else {
						commonByteArray_ELAN_Pseudonomize = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ELAN_Pseudonomize, 0, length);
				strReturn = new String(commonByteArray_ELAN_Pseudonomize, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Pseudonomize) {

				try {

					int length = 0;

					this.pseudo = readString(dis);

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.pseudo, dos);

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("pseudo=" + pseudo);
			sb.append(",id=" + String.valueOf(id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(idMapStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.pseudo, other.pseudo);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				idMapStruct idMap = new idMapStruct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						(context.folder.endsWith(File.separator) ? context.folder
								: context.folder.concat(File.separator))
								.concat("ids.csv"))).getAbsolutePath().replace(
						"\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				context.separator == null || context.separator.isEmpty() ? "\t"
						: context.separator/**
				 * End field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, false),
								"UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tHashInput_2 begin ] start
				 */

				ok_Hash.put("tHashInput_2", false);
				start_Hash.put("tHashInput_2", System.currentTimeMillis());

				currentComponent = "tHashInput_2";

				int tos_count_tHashInput_2 = 0;

				int nb_line_tHashInput_2 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<idsStruct> tHashFile_tHashInput_2 = mf_tHashInput_2
						.getAdvancedMemoryHashFile("tHashFile_Pseudonomize_"
								+ pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_2 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<idsStruct> iterator_tHashInput_2 = tHashFile_tHashInput_2
						.iterator();
				while (iterator_tHashInput_2.hasNext()) {
					idsStruct next_tHashInput_2 = iterator_tHashInput_2.next();

					idMap.pseudo = next_tHashInput_2.pseudo;
					idMap.id = next_tHashInput_2.id;

					/**
					 * [tHashInput_2 begin ] stop
					 */

					/**
					 * [tHashInput_2 main ] start
					 */

					currentComponent = "tHashInput_2";

					tos_count_tHashInput_2++;

					/**
					 * [tHashInput_2 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 main ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
					if (idMap.pseudo != null) {
						sb_tFileOutputDelimited_2.append(idMap.pseudo);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					sb_tFileOutputDelimited_2.append(idMap.id);
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

					nb_line_tFileOutputDelimited_2++;
					resourceMap.put("nb_line_tFileOutputDelimited_2",
							nb_line_tFileOutputDelimited_2);

					outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2
							.toString());

					tos_count_tFileOutputDelimited_2++;

					/**
					 * [tFileOutputDelimited_2 main ] stop
					 */

					/**
					 * [tHashInput_2 end ] start
					 */

					currentComponent = "tHashInput_2";

					nb_line_tHashInput_2++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_Pseudonomize_" + pid
								+ "_tHashOutput_1");

				globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);

				ok_Hash.put("tHashInput_2", true);
				end_Hash.put("tHashInput_2", System.currentTimeMillis());

				/**
				 * [tHashInput_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				tJava_5Process(globalMap);

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_2 finally ] start
				 */

				currentComponent = "tHashInput_2";

				/**
				 * [tHashInput_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				System.out.println("Done.");

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				System.out.println("Done.");

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public static class lookUpIDsStruct implements
			routines.system.IPersistableComparableLookupRow<lookUpIDsStruct> {
		final static byte[] commonByteArrayLock_ELAN_Pseudonomize = new byte[0];
		static byte[] commonByteArray_ELAN_Pseudonomize = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String pseudo;

		public String getPseudo() {
			return this.pseudo;
		}

		public int id;

		public int getId() {
			return this.id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.pseudo == null) ? 0 : this.pseudo.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final lookUpIDsStruct other = (lookUpIDsStruct) obj;

			if (this.pseudo == null) {
				if (other.pseudo != null)
					return false;

			} else if (!this.pseudo.equals(other.pseudo))

				return false;

			return true;
		}

		public void copyDataTo(lookUpIDsStruct other) {

			other.pseudo = this.pseudo;
			other.id = this.id;

		}

		public void copyKeysDataTo(lookUpIDsStruct other) {

			other.pseudo = this.pseudo;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ELAN_Pseudonomize.length) {
					if (length < 1024
							&& commonByteArray_ELAN_Pseudonomize.length == 0) {
						commonByteArray_ELAN_Pseudonomize = new byte[1024];
					} else {
						commonByteArray_ELAN_Pseudonomize = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ELAN_Pseudonomize, 0, length);
				strReturn = new String(commonByteArray_ELAN_Pseudonomize, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Pseudonomize) {

				try {

					int length = 0;

					this.pseudo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.pseudo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("pseudo=" + pseudo);
			sb.append(",id=" + String.valueOf(id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(lookUpIDsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.pseudo, other.pseudo);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				lookUpIDsStruct lookUpIDs = new lookUpIDsStruct();

				/**
				 * [tAdvancedHash_lookUpIDs begin ] start
				 */

				ok_Hash.put("tAdvancedHash_lookUpIDs", false);
				start_Hash.put("tAdvancedHash_lookUpIDs",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_lookUpIDs";

				int tos_count_tAdvancedHash_lookUpIDs = 0;

				// connection name:lookUpIDs
				// source node:tHashInput_1 - inputs:(after_tFileList_1)
				// outputs:(lookUpIDs,lookUpIDs) | target
				// node:tAdvancedHash_lookUpIDs - inputs:(lookUpIDs) outputs:()
				// linked node: tMap_2 - inputs:(row,lookUpIDs)
				// outputs:(rowPseudo)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_lookUpIDs = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<lookUpIDsStruct> tHash_Lookup_lookUpIDs = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<lookUpIDsStruct> getLookup(matchingModeEnum_lookUpIDs);

				globalMap.put("tHash_Lookup_lookUpIDs", tHash_Lookup_lookUpIDs);

				/**
				 * [tAdvancedHash_lookUpIDs begin ] stop
				 */

				/**
				 * [tHashInput_1 begin ] start
				 */

				ok_Hash.put("tHashInput_1", false);
				start_Hash.put("tHashInput_1", System.currentTimeMillis());

				currentComponent = "tHashInput_1";

				int tos_count_tHashInput_1 = 0;

				int nb_line_tHashInput_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<idsStruct> tHashFile_tHashInput_1 = mf_tHashInput_1
						.getAdvancedMemoryHashFile("tHashFile_Pseudonomize_"
								+ pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_1 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<idsStruct> iterator_tHashInput_1 = tHashFile_tHashInput_1
						.iterator();
				while (iterator_tHashInput_1.hasNext()) {
					idsStruct next_tHashInput_1 = iterator_tHashInput_1.next();

					lookUpIDs.pseudo = next_tHashInput_1.pseudo;
					lookUpIDs.id = next_tHashInput_1.id;

					/**
					 * [tHashInput_1 begin ] stop
					 */

					/**
					 * [tHashInput_1 main ] start
					 */

					currentComponent = "tHashInput_1";

					tos_count_tHashInput_1++;

					/**
					 * [tHashInput_1 main ] stop
					 */

					/**
					 * [tAdvancedHash_lookUpIDs main ] start
					 */

					currentComponent = "tAdvancedHash_lookUpIDs";

					lookUpIDsStruct lookUpIDs_HashRow = new lookUpIDsStruct();

					lookUpIDs_HashRow.pseudo = lookUpIDs.pseudo;

					lookUpIDs_HashRow.id = lookUpIDs.id;

					tHash_Lookup_lookUpIDs.put(lookUpIDs_HashRow);

					tos_count_tAdvancedHash_lookUpIDs++;

					/**
					 * [tAdvancedHash_lookUpIDs main ] stop
					 */

					/**
					 * [tHashInput_1 end ] start
					 */

					currentComponent = "tHashInput_1";

					nb_line_tHashInput_1++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_Pseudonomize_" + pid
								+ "_tHashOutput_1");

				globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);

				ok_Hash.put("tHashInput_1", true);
				end_Hash.put("tHashInput_1", System.currentTimeMillis());

				/**
				 * [tHashInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_lookUpIDs end ] start
				 */

				currentComponent = "tAdvancedHash_lookUpIDs";

				tHash_Lookup_lookUpIDs.endPut();

				ok_Hash.put("tAdvancedHash_lookUpIDs", true);
				end_Hash.put("tAdvancedHash_lookUpIDs",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_lookUpIDs end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_1 finally ] start
				 */

				currentComponent = "tHashInput_1";

				/**
				 * [tHashInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_lookUpIDs finally ] start
				 */

				currentComponent = "tAdvancedHash_lookUpIDs";

				/**
				 * [tAdvancedHash_lookUpIDs finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Pseudonomize PseudonomizeClass = new Pseudonomize();

		int exitCode = PseudonomizeClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Pseudonomize.class.getClassLoader()
					.getResourceAsStream(
							"elan/pseudonomize_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.folder = (String) context.getProperty("folder");
			context.input = (String) context.getProperty("input");
			context.separator = (String) context.getProperty("separator");
			context.header = (String) context.getProperty("header");
			context.dateFormat = (String) context.getProperty("dateFormat");
			context.saveMapping = (String) context.getProperty("saveMapping");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("folder")) {
				context.folder = (String) parentContextMap.get("folder");
			}
			if (parentContextMap.containsKey("input")) {
				context.input = (String) parentContextMap.get("input");
			}
			if (parentContextMap.containsKey("separator")) {
				context.separator = (String) parentContextMap.get("separator");
			}
			if (parentContextMap.containsKey("header")) {
				context.header = (String) parentContextMap.get("header");
			}
			if (parentContextMap.containsKey("dateFormat")) {
				context.dateFormat = (String) parentContextMap
						.get("dateFormat");
			}
			if (parentContextMap.containsKey("saveMapping")) {
				context.saveMapping = (String) parentContextMap
						.get("saveMapping");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Pseudonomize");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 299818 characters generated by Talend Open Studio for Data Integration on the
 * October 16, 2018 5:39:12 PM CEST
 ************************************************************************************************/
