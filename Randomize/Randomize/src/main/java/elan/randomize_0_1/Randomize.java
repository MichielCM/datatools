// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package elan.randomize_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_1
import java.util.ArrayList;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Randomize Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class Randomize implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (input != null) {

				this.setProperty("input", input.toString());

			}

			if (number != null) {

				this.setProperty("number", number.toString());

			}

			if (separator != null) {

				this.setProperty("separator", separator.toString());

			}

			if (header != null) {

				this.setProperty("header", header.toString());

			}

		}

		public String input;

		public String getInput() {
			return this.input;
		}

		public Integer number;

		public Integer getNumber() {
			return this.number;
		}

		public String separator;

		public String getSeparator() {
			return this.separator;
		}

		public String header;

		public String getHeader() {
			return this.header;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Randomize";
	private final String projectName = "ELAN";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Randomize.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Randomize.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileRowCount_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileRowCount_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileRowCount_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("Counting rows...");

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileRowCount_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tFileRowCount_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileRowCount_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileRowCount_1 begin ] start
				 */

				ok_Hash.put("tFileRowCount_1", false);
				start_Hash.put("tFileRowCount_1", System.currentTimeMillis());

				currentComponent = "tFileRowCount_1";

				int tos_count_tFileRowCount_1 = 0;

				/**
				 * [tFileRowCount_1 begin ] stop
				 */

				/**
				 * [tFileRowCount_1 main ] start
				 */

				currentComponent = "tFileRowCount_1";

				String tmp_tFileRowCount_1 = context.input;
				int emptyLineCount_tFileRowCount_1 = 0;
				if (tmp_tFileRowCount_1.toLowerCase().endsWith(".xlsx"))
					throw new RuntimeException("not support excel 2007");
				int lineCount_tFileRowCount_1 = 0;
				if (tmp_tFileRowCount_1.toLowerCase().endsWith(".xls")) {
					final jxl.WorkbookSettings wbs_tFileRowCount_1 = new jxl.WorkbookSettings();
					wbs_tFileRowCount_1.setEncoding("UTF-8");
					final jxl.Workbook wb_tFileRowCount_1 = jxl.Workbook
							.getWorkbook(
									new java.io.BufferedInputStream(
											new java.io.FileInputStream(
													context.input)),
									wbs_tFileRowCount_1);

					java.util.List<jxl.Sheet> sheets_tFileRowCount_1 = new java.util.ArrayList<jxl.Sheet>();
					;
					sheets_tFileRowCount_1 = java.util.Arrays
							.<jxl.Sheet> asList(wb_tFileRowCount_1.getSheets());

					if (sheets_tFileRowCount_1.size() <= 0) {
						wb_tFileRowCount_1.close();
						throw new RuntimeException("Special sheets not exist!");
					}

					for (jxl.Sheet sheet_tFileRowCount_1 : sheets_tFileRowCount_1) {
						int one_sheet_rows = sheet_tFileRowCount_1.getRows();
						lineCount_tFileRowCount_1 += one_sheet_rows;

						for (int i_tFileRowCount_1 = 0; i_tFileRowCount_1 < one_sheet_rows; i_tFileRowCount_1++) {
							jxl.Cell[] sheet_row = sheet_tFileRowCount_1
									.getRow(i_tFileRowCount_1);

							boolean bIsEmptyRow = true;
							for (jxl.Cell cell : sheet_row) {
								if (cell.getContents() != null) {
									bIsEmptyRow = false;
									break;
								}
							}
							emptyLineCount_tFileRowCount_1 += bIsEmptyRow ? 1
									: 0;
						}
					}
					wb_tFileRowCount_1.close();

				} else {
					java.io.BufferedReader br_tFileRowCount_1 = new java.io.BufferedReader(
							new java.io.InputStreamReader(
									new java.io.FileInputStream(context.input),
									"UTF-8"));
					String rowSeparator_tFileRowCount_1 = "\n";
					byte[] bytes_tFileRowCount_1 = rowSeparator_tFileRowCount_1
							.getBytes();
					int index_tFileRowCount_1 = 0, oneChar_tFileRowCount_1 = 0, tipEmptyLineCount_tFileRowCount_1 = 0;
					boolean bTipEmptyFlagOpen_tFileRowCount_1 = true, bReadyEOF_tFileRowCount_1 = false;

					if (bytes_tFileRowCount_1.length > 0) {
						while ((oneChar_tFileRowCount_1 = br_tFileRowCount_1
								.read()) != -1) {
							if (oneChar_tFileRowCount_1 == bytes_tFileRowCount_1[index_tFileRowCount_1]) {

								if (index_tFileRowCount_1 < bytes_tFileRowCount_1.length - 1) {
									index_tFileRowCount_1++;
									continue; // match next char
								}

								if (index_tFileRowCount_1 == bytes_tFileRowCount_1.length - 1) {
									lineCount_tFileRowCount_1++;
									if (bTipEmptyFlagOpen_tFileRowCount_1) {
										tipEmptyLineCount_tFileRowCount_1++;
										emptyLineCount_tFileRowCount_1++;
									}
									bReadyEOF_tFileRowCount_1 = false; // next
																		// row
																		// must
																		// be
																		// have
																		// char(or
																		// EOF
																		// flag)
									bTipEmptyFlagOpen_tFileRowCount_1 = true;
									index_tFileRowCount_1 = 0;
								}

							} else {
								bReadyEOF_tFileRowCount_1 = true;
								bTipEmptyFlagOpen_tFileRowCount_1 = false;
								tipEmptyLineCount_tFileRowCount_1 = 0;
								index_tFileRowCount_1 = 0;
							}
						}

						if (bReadyEOF_tFileRowCount_1)
							lineCount_tFileRowCount_1++; // add last row if not
															// end by row
															// separator

						if (bTipEmptyFlagOpen_tFileRowCount_1) {
							lineCount_tFileRowCount_1 -= tipEmptyLineCount_tFileRowCount_1;
							emptyLineCount_tFileRowCount_1 -= tipEmptyLineCount_tFileRowCount_1;
						}
					}
					br_tFileRowCount_1.close();
				}

				globalMap.put("tFileRowCount_1_COUNT",
						lineCount_tFileRowCount_1);

				tos_count_tFileRowCount_1++;

				/**
				 * [tFileRowCount_1 main ] stop
				 */

				/**
				 * [tFileRowCount_1 end ] start
				 */

				currentComponent = "tFileRowCount_1";

				ok_Hash.put("tFileRowCount_1", true);
				end_Hash.put("tFileRowCount_1", System.currentTimeMillis());

				/**
				 * [tFileRowCount_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileRowCount_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileRowCount_1 finally ] start
				 */

				currentComponent = "tFileRowCount_1";

				/**
				 * [tFileRowCount_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileRowCount_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("Number of rows: ".concat(String
						.valueOf(globalMap.get("tFileRowCount_1_COUNT"))));

				ArrayList<Integer> randoms = new ArrayList<Integer>();

				if (context.header == null
						|| context.header.equalsIgnoreCase("Y")) {
					randoms.add(1);
				}

				for (int i = 0; i < context.number; i++) {
					int random = 0;

					do {
						random = (int) (Math.random() * (int) globalMap
								.get("tFileRowCount_1_COUNT"));
					} while (randoms.contains(random)
							|| random == 0
							|| ((context.header == null || context.header
									.equalsIgnoreCase("Y")) && random == 1));

					randoms.add(random);
				}

				globalMap.put("randoms", randoms);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class outputRowStruct implements
			routines.system.IPersistableRow<outputRowStruct> {
		final static byte[] commonByteArrayLock_ELAN_Randomize = new byte[0];
		static byte[] commonByteArray_ELAN_Randomize = new byte[0];

		public Integer rowNumber;

		public Integer getRowNumber() {
			return this.rowNumber;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String newColumn2;

		public String getNewColumn2() {
			return this.newColumn2;
		}

		public String newColumn3;

		public String getNewColumn3() {
			return this.newColumn3;
		}

		public String newColumn4;

		public String getNewColumn4() {
			return this.newColumn4;
		}

		public String newColumn5;

		public String getNewColumn5() {
			return this.newColumn5;
		}

		public String newColumn6;

		public String getNewColumn6() {
			return this.newColumn6;
		}

		public String newColumn7;

		public String getNewColumn7() {
			return this.newColumn7;
		}

		public String newColumn8;

		public String getNewColumn8() {
			return this.newColumn8;
		}

		public String newColumn9;

		public String getNewColumn9() {
			return this.newColumn9;
		}

		public String newColumn10;

		public String getNewColumn10() {
			return this.newColumn10;
		}

		public String newColumn11;

		public String getNewColumn11() {
			return this.newColumn11;
		}

		public String newColumn12;

		public String getNewColumn12() {
			return this.newColumn12;
		}

		public String newColumn13;

		public String getNewColumn13() {
			return this.newColumn13;
		}

		public String newColumn14;

		public String getNewColumn14() {
			return this.newColumn14;
		}

		public String newColumn15;

		public String getNewColumn15() {
			return this.newColumn15;
		}

		public String newColumn16;

		public String getNewColumn16() {
			return this.newColumn16;
		}

		public String newColumn17;

		public String getNewColumn17() {
			return this.newColumn17;
		}

		public String newColumn18;

		public String getNewColumn18() {
			return this.newColumn18;
		}

		public String newColumn19;

		public String getNewColumn19() {
			return this.newColumn19;
		}

		public String newColumn20;

		public String getNewColumn20() {
			return this.newColumn20;
		}

		public String newColumn21;

		public String getNewColumn21() {
			return this.newColumn21;
		}

		public String newColumn22;

		public String getNewColumn22() {
			return this.newColumn22;
		}

		public String newColumn23;

		public String getNewColumn23() {
			return this.newColumn23;
		}

		public String newColumn24;

		public String getNewColumn24() {
			return this.newColumn24;
		}

		public String newColumn25;

		public String getNewColumn25() {
			return this.newColumn25;
		}

		public String newColumn26;

		public String getNewColumn26() {
			return this.newColumn26;
		}

		public String newColumn27;

		public String getNewColumn27() {
			return this.newColumn27;
		}

		public String newColumn28;

		public String getNewColumn28() {
			return this.newColumn28;
		}

		public String newColumn29;

		public String getNewColumn29() {
			return this.newColumn29;
		}

		public String newColumn30;

		public String getNewColumn30() {
			return this.newColumn30;
		}

		public String newColumn31;

		public String getNewColumn31() {
			return this.newColumn31;
		}

		public String newColumn32;

		public String getNewColumn32() {
			return this.newColumn32;
		}

		public String newColumn33;

		public String getNewColumn33() {
			return this.newColumn33;
		}

		public String newColumn34;

		public String getNewColumn34() {
			return this.newColumn34;
		}

		public String newColumn35;

		public String getNewColumn35() {
			return this.newColumn35;
		}

		public String newColumn36;

		public String getNewColumn36() {
			return this.newColumn36;
		}

		public String newColumn37;

		public String getNewColumn37() {
			return this.newColumn37;
		}

		public String newColumn38;

		public String getNewColumn38() {
			return this.newColumn38;
		}

		public String newColumn39;

		public String getNewColumn39() {
			return this.newColumn39;
		}

		public String newColumn40;

		public String getNewColumn40() {
			return this.newColumn40;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ELAN_Randomize.length) {
					if (length < 1024
							&& commonByteArray_ELAN_Randomize.length == 0) {
						commonByteArray_ELAN_Randomize = new byte[1024];
					} else {
						commonByteArray_ELAN_Randomize = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ELAN_Randomize, 0, length);
				strReturn = new String(commonByteArray_ELAN_Randomize, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Randomize) {

				try {

					int length = 0;

					this.rowNumber = readInteger(dis);

					this.newColumn1 = readString(dis);

					this.newColumn2 = readString(dis);

					this.newColumn3 = readString(dis);

					this.newColumn4 = readString(dis);

					this.newColumn5 = readString(dis);

					this.newColumn6 = readString(dis);

					this.newColumn7 = readString(dis);

					this.newColumn8 = readString(dis);

					this.newColumn9 = readString(dis);

					this.newColumn10 = readString(dis);

					this.newColumn11 = readString(dis);

					this.newColumn12 = readString(dis);

					this.newColumn13 = readString(dis);

					this.newColumn14 = readString(dis);

					this.newColumn15 = readString(dis);

					this.newColumn16 = readString(dis);

					this.newColumn17 = readString(dis);

					this.newColumn18 = readString(dis);

					this.newColumn19 = readString(dis);

					this.newColumn20 = readString(dis);

					this.newColumn21 = readString(dis);

					this.newColumn22 = readString(dis);

					this.newColumn23 = readString(dis);

					this.newColumn24 = readString(dis);

					this.newColumn25 = readString(dis);

					this.newColumn26 = readString(dis);

					this.newColumn27 = readString(dis);

					this.newColumn28 = readString(dis);

					this.newColumn29 = readString(dis);

					this.newColumn30 = readString(dis);

					this.newColumn31 = readString(dis);

					this.newColumn32 = readString(dis);

					this.newColumn33 = readString(dis);

					this.newColumn34 = readString(dis);

					this.newColumn35 = readString(dis);

					this.newColumn36 = readString(dis);

					this.newColumn37 = readString(dis);

					this.newColumn38 = readString(dis);

					this.newColumn39 = readString(dis);

					this.newColumn40 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.rowNumber, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.newColumn2, dos);

				// String

				writeString(this.newColumn3, dos);

				// String

				writeString(this.newColumn4, dos);

				// String

				writeString(this.newColumn5, dos);

				// String

				writeString(this.newColumn6, dos);

				// String

				writeString(this.newColumn7, dos);

				// String

				writeString(this.newColumn8, dos);

				// String

				writeString(this.newColumn9, dos);

				// String

				writeString(this.newColumn10, dos);

				// String

				writeString(this.newColumn11, dos);

				// String

				writeString(this.newColumn12, dos);

				// String

				writeString(this.newColumn13, dos);

				// String

				writeString(this.newColumn14, dos);

				// String

				writeString(this.newColumn15, dos);

				// String

				writeString(this.newColumn16, dos);

				// String

				writeString(this.newColumn17, dos);

				// String

				writeString(this.newColumn18, dos);

				// String

				writeString(this.newColumn19, dos);

				// String

				writeString(this.newColumn20, dos);

				// String

				writeString(this.newColumn21, dos);

				// String

				writeString(this.newColumn22, dos);

				// String

				writeString(this.newColumn23, dos);

				// String

				writeString(this.newColumn24, dos);

				// String

				writeString(this.newColumn25, dos);

				// String

				writeString(this.newColumn26, dos);

				// String

				writeString(this.newColumn27, dos);

				// String

				writeString(this.newColumn28, dos);

				// String

				writeString(this.newColumn29, dos);

				// String

				writeString(this.newColumn30, dos);

				// String

				writeString(this.newColumn31, dos);

				// String

				writeString(this.newColumn32, dos);

				// String

				writeString(this.newColumn33, dos);

				// String

				writeString(this.newColumn34, dos);

				// String

				writeString(this.newColumn35, dos);

				// String

				writeString(this.newColumn36, dos);

				// String

				writeString(this.newColumn37, dos);

				// String

				writeString(this.newColumn38, dos);

				// String

				writeString(this.newColumn39, dos);

				// String

				writeString(this.newColumn40, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rowNumber=" + String.valueOf(rowNumber));
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + newColumn2);
			sb.append(",newColumn3=" + newColumn3);
			sb.append(",newColumn4=" + newColumn4);
			sb.append(",newColumn5=" + newColumn5);
			sb.append(",newColumn6=" + newColumn6);
			sb.append(",newColumn7=" + newColumn7);
			sb.append(",newColumn8=" + newColumn8);
			sb.append(",newColumn9=" + newColumn9);
			sb.append(",newColumn10=" + newColumn10);
			sb.append(",newColumn11=" + newColumn11);
			sb.append(",newColumn12=" + newColumn12);
			sb.append(",newColumn13=" + newColumn13);
			sb.append(",newColumn14=" + newColumn14);
			sb.append(",newColumn15=" + newColumn15);
			sb.append(",newColumn16=" + newColumn16);
			sb.append(",newColumn17=" + newColumn17);
			sb.append(",newColumn18=" + newColumn18);
			sb.append(",newColumn19=" + newColumn19);
			sb.append(",newColumn20=" + newColumn20);
			sb.append(",newColumn21=" + newColumn21);
			sb.append(",newColumn22=" + newColumn22);
			sb.append(",newColumn23=" + newColumn23);
			sb.append(",newColumn24=" + newColumn24);
			sb.append(",newColumn25=" + newColumn25);
			sb.append(",newColumn26=" + newColumn26);
			sb.append(",newColumn27=" + newColumn27);
			sb.append(",newColumn28=" + newColumn28);
			sb.append(",newColumn29=" + newColumn29);
			sb.append(",newColumn30=" + newColumn30);
			sb.append(",newColumn31=" + newColumn31);
			sb.append(",newColumn32=" + newColumn32);
			sb.append(",newColumn33=" + newColumn33);
			sb.append(",newColumn34=" + newColumn34);
			sb.append(",newColumn35=" + newColumn35);
			sb.append(",newColumn36=" + newColumn36);
			sb.append(",newColumn37=" + newColumn37);
			sb.append(",newColumn38=" + newColumn38);
			sb.append(",newColumn39=" + newColumn39);
			sb.append(",newColumn40=" + newColumn40);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outputRowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class selectedRowStruct implements
			routines.system.IPersistableRow<selectedRowStruct> {
		final static byte[] commonByteArrayLock_ELAN_Randomize = new byte[0];
		static byte[] commonByteArray_ELAN_Randomize = new byte[0];

		public Integer rowNumber;

		public Integer getRowNumber() {
			return this.rowNumber;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String newColumn2;

		public String getNewColumn2() {
			return this.newColumn2;
		}

		public String newColumn3;

		public String getNewColumn3() {
			return this.newColumn3;
		}

		public String newColumn4;

		public String getNewColumn4() {
			return this.newColumn4;
		}

		public String newColumn5;

		public String getNewColumn5() {
			return this.newColumn5;
		}

		public String newColumn6;

		public String getNewColumn6() {
			return this.newColumn6;
		}

		public String newColumn7;

		public String getNewColumn7() {
			return this.newColumn7;
		}

		public String newColumn8;

		public String getNewColumn8() {
			return this.newColumn8;
		}

		public String newColumn9;

		public String getNewColumn9() {
			return this.newColumn9;
		}

		public String newColumn10;

		public String getNewColumn10() {
			return this.newColumn10;
		}

		public String newColumn11;

		public String getNewColumn11() {
			return this.newColumn11;
		}

		public String newColumn12;

		public String getNewColumn12() {
			return this.newColumn12;
		}

		public String newColumn13;

		public String getNewColumn13() {
			return this.newColumn13;
		}

		public String newColumn14;

		public String getNewColumn14() {
			return this.newColumn14;
		}

		public String newColumn15;

		public String getNewColumn15() {
			return this.newColumn15;
		}

		public String newColumn16;

		public String getNewColumn16() {
			return this.newColumn16;
		}

		public String newColumn17;

		public String getNewColumn17() {
			return this.newColumn17;
		}

		public String newColumn18;

		public String getNewColumn18() {
			return this.newColumn18;
		}

		public String newColumn19;

		public String getNewColumn19() {
			return this.newColumn19;
		}

		public String newColumn20;

		public String getNewColumn20() {
			return this.newColumn20;
		}

		public String newColumn21;

		public String getNewColumn21() {
			return this.newColumn21;
		}

		public String newColumn22;

		public String getNewColumn22() {
			return this.newColumn22;
		}

		public String newColumn23;

		public String getNewColumn23() {
			return this.newColumn23;
		}

		public String newColumn24;

		public String getNewColumn24() {
			return this.newColumn24;
		}

		public String newColumn25;

		public String getNewColumn25() {
			return this.newColumn25;
		}

		public String newColumn26;

		public String getNewColumn26() {
			return this.newColumn26;
		}

		public String newColumn27;

		public String getNewColumn27() {
			return this.newColumn27;
		}

		public String newColumn28;

		public String getNewColumn28() {
			return this.newColumn28;
		}

		public String newColumn29;

		public String getNewColumn29() {
			return this.newColumn29;
		}

		public String newColumn30;

		public String getNewColumn30() {
			return this.newColumn30;
		}

		public String newColumn31;

		public String getNewColumn31() {
			return this.newColumn31;
		}

		public String newColumn32;

		public String getNewColumn32() {
			return this.newColumn32;
		}

		public String newColumn33;

		public String getNewColumn33() {
			return this.newColumn33;
		}

		public String newColumn34;

		public String getNewColumn34() {
			return this.newColumn34;
		}

		public String newColumn35;

		public String getNewColumn35() {
			return this.newColumn35;
		}

		public String newColumn36;

		public String getNewColumn36() {
			return this.newColumn36;
		}

		public String newColumn37;

		public String getNewColumn37() {
			return this.newColumn37;
		}

		public String newColumn38;

		public String getNewColumn38() {
			return this.newColumn38;
		}

		public String newColumn39;

		public String getNewColumn39() {
			return this.newColumn39;
		}

		public String newColumn40;

		public String getNewColumn40() {
			return this.newColumn40;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ELAN_Randomize.length) {
					if (length < 1024
							&& commonByteArray_ELAN_Randomize.length == 0) {
						commonByteArray_ELAN_Randomize = new byte[1024];
					} else {
						commonByteArray_ELAN_Randomize = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ELAN_Randomize, 0, length);
				strReturn = new String(commonByteArray_ELAN_Randomize, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Randomize) {

				try {

					int length = 0;

					this.rowNumber = readInteger(dis);

					this.newColumn1 = readString(dis);

					this.newColumn2 = readString(dis);

					this.newColumn3 = readString(dis);

					this.newColumn4 = readString(dis);

					this.newColumn5 = readString(dis);

					this.newColumn6 = readString(dis);

					this.newColumn7 = readString(dis);

					this.newColumn8 = readString(dis);

					this.newColumn9 = readString(dis);

					this.newColumn10 = readString(dis);

					this.newColumn11 = readString(dis);

					this.newColumn12 = readString(dis);

					this.newColumn13 = readString(dis);

					this.newColumn14 = readString(dis);

					this.newColumn15 = readString(dis);

					this.newColumn16 = readString(dis);

					this.newColumn17 = readString(dis);

					this.newColumn18 = readString(dis);

					this.newColumn19 = readString(dis);

					this.newColumn20 = readString(dis);

					this.newColumn21 = readString(dis);

					this.newColumn22 = readString(dis);

					this.newColumn23 = readString(dis);

					this.newColumn24 = readString(dis);

					this.newColumn25 = readString(dis);

					this.newColumn26 = readString(dis);

					this.newColumn27 = readString(dis);

					this.newColumn28 = readString(dis);

					this.newColumn29 = readString(dis);

					this.newColumn30 = readString(dis);

					this.newColumn31 = readString(dis);

					this.newColumn32 = readString(dis);

					this.newColumn33 = readString(dis);

					this.newColumn34 = readString(dis);

					this.newColumn35 = readString(dis);

					this.newColumn36 = readString(dis);

					this.newColumn37 = readString(dis);

					this.newColumn38 = readString(dis);

					this.newColumn39 = readString(dis);

					this.newColumn40 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.rowNumber, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.newColumn2, dos);

				// String

				writeString(this.newColumn3, dos);

				// String

				writeString(this.newColumn4, dos);

				// String

				writeString(this.newColumn5, dos);

				// String

				writeString(this.newColumn6, dos);

				// String

				writeString(this.newColumn7, dos);

				// String

				writeString(this.newColumn8, dos);

				// String

				writeString(this.newColumn9, dos);

				// String

				writeString(this.newColumn10, dos);

				// String

				writeString(this.newColumn11, dos);

				// String

				writeString(this.newColumn12, dos);

				// String

				writeString(this.newColumn13, dos);

				// String

				writeString(this.newColumn14, dos);

				// String

				writeString(this.newColumn15, dos);

				// String

				writeString(this.newColumn16, dos);

				// String

				writeString(this.newColumn17, dos);

				// String

				writeString(this.newColumn18, dos);

				// String

				writeString(this.newColumn19, dos);

				// String

				writeString(this.newColumn20, dos);

				// String

				writeString(this.newColumn21, dos);

				// String

				writeString(this.newColumn22, dos);

				// String

				writeString(this.newColumn23, dos);

				// String

				writeString(this.newColumn24, dos);

				// String

				writeString(this.newColumn25, dos);

				// String

				writeString(this.newColumn26, dos);

				// String

				writeString(this.newColumn27, dos);

				// String

				writeString(this.newColumn28, dos);

				// String

				writeString(this.newColumn29, dos);

				// String

				writeString(this.newColumn30, dos);

				// String

				writeString(this.newColumn31, dos);

				// String

				writeString(this.newColumn32, dos);

				// String

				writeString(this.newColumn33, dos);

				// String

				writeString(this.newColumn34, dos);

				// String

				writeString(this.newColumn35, dos);

				// String

				writeString(this.newColumn36, dos);

				// String

				writeString(this.newColumn37, dos);

				// String

				writeString(this.newColumn38, dos);

				// String

				writeString(this.newColumn39, dos);

				// String

				writeString(this.newColumn40, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rowNumber=" + String.valueOf(rowNumber));
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + newColumn2);
			sb.append(",newColumn3=" + newColumn3);
			sb.append(",newColumn4=" + newColumn4);
			sb.append(",newColumn5=" + newColumn5);
			sb.append(",newColumn6=" + newColumn6);
			sb.append(",newColumn7=" + newColumn7);
			sb.append(",newColumn8=" + newColumn8);
			sb.append(",newColumn9=" + newColumn9);
			sb.append(",newColumn10=" + newColumn10);
			sb.append(",newColumn11=" + newColumn11);
			sb.append(",newColumn12=" + newColumn12);
			sb.append(",newColumn13=" + newColumn13);
			sb.append(",newColumn14=" + newColumn14);
			sb.append(",newColumn15=" + newColumn15);
			sb.append(",newColumn16=" + newColumn16);
			sb.append(",newColumn17=" + newColumn17);
			sb.append(",newColumn18=" + newColumn18);
			sb.append(",newColumn19=" + newColumn19);
			sb.append(",newColumn20=" + newColumn20);
			sb.append(",newColumn21=" + newColumn21);
			sb.append(",newColumn22=" + newColumn22);
			sb.append(",newColumn23=" + newColumn23);
			sb.append(",newColumn24=" + newColumn24);
			sb.append(",newColumn25=" + newColumn25);
			sb.append(",newColumn26=" + newColumn26);
			sb.append(",newColumn27=" + newColumn27);
			sb.append(",newColumn28=" + newColumn28);
			sb.append(",newColumn29=" + newColumn29);
			sb.append(",newColumn30=" + newColumn30);
			sb.append(",newColumn31=" + newColumn31);
			sb.append(",newColumn32=" + newColumn32);
			sb.append(",newColumn33=" + newColumn33);
			sb.append(",newColumn34=" + newColumn34);
			sb.append(",newColumn35=" + newColumn35);
			sb.append(",newColumn36=" + newColumn36);
			sb.append(",newColumn37=" + newColumn37);
			sb.append(",newColumn38=" + newColumn38);
			sb.append(",newColumn39=" + newColumn39);
			sb.append(",newColumn40=" + newColumn40);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(selectedRowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class numberedRowStruct implements
			routines.system.IPersistableRow<numberedRowStruct> {
		final static byte[] commonByteArrayLock_ELAN_Randomize = new byte[0];
		static byte[] commonByteArray_ELAN_Randomize = new byte[0];

		public Integer rowNumber;

		public Integer getRowNumber() {
			return this.rowNumber;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String newColumn2;

		public String getNewColumn2() {
			return this.newColumn2;
		}

		public String newColumn3;

		public String getNewColumn3() {
			return this.newColumn3;
		}

		public String newColumn4;

		public String getNewColumn4() {
			return this.newColumn4;
		}

		public String newColumn5;

		public String getNewColumn5() {
			return this.newColumn5;
		}

		public String newColumn6;

		public String getNewColumn6() {
			return this.newColumn6;
		}

		public String newColumn7;

		public String getNewColumn7() {
			return this.newColumn7;
		}

		public String newColumn8;

		public String getNewColumn8() {
			return this.newColumn8;
		}

		public String newColumn9;

		public String getNewColumn9() {
			return this.newColumn9;
		}

		public String newColumn10;

		public String getNewColumn10() {
			return this.newColumn10;
		}

		public String newColumn11;

		public String getNewColumn11() {
			return this.newColumn11;
		}

		public String newColumn12;

		public String getNewColumn12() {
			return this.newColumn12;
		}

		public String newColumn13;

		public String getNewColumn13() {
			return this.newColumn13;
		}

		public String newColumn14;

		public String getNewColumn14() {
			return this.newColumn14;
		}

		public String newColumn15;

		public String getNewColumn15() {
			return this.newColumn15;
		}

		public String newColumn16;

		public String getNewColumn16() {
			return this.newColumn16;
		}

		public String newColumn17;

		public String getNewColumn17() {
			return this.newColumn17;
		}

		public String newColumn18;

		public String getNewColumn18() {
			return this.newColumn18;
		}

		public String newColumn19;

		public String getNewColumn19() {
			return this.newColumn19;
		}

		public String newColumn20;

		public String getNewColumn20() {
			return this.newColumn20;
		}

		public String newColumn21;

		public String getNewColumn21() {
			return this.newColumn21;
		}

		public String newColumn22;

		public String getNewColumn22() {
			return this.newColumn22;
		}

		public String newColumn23;

		public String getNewColumn23() {
			return this.newColumn23;
		}

		public String newColumn24;

		public String getNewColumn24() {
			return this.newColumn24;
		}

		public String newColumn25;

		public String getNewColumn25() {
			return this.newColumn25;
		}

		public String newColumn26;

		public String getNewColumn26() {
			return this.newColumn26;
		}

		public String newColumn27;

		public String getNewColumn27() {
			return this.newColumn27;
		}

		public String newColumn28;

		public String getNewColumn28() {
			return this.newColumn28;
		}

		public String newColumn29;

		public String getNewColumn29() {
			return this.newColumn29;
		}

		public String newColumn30;

		public String getNewColumn30() {
			return this.newColumn30;
		}

		public String newColumn31;

		public String getNewColumn31() {
			return this.newColumn31;
		}

		public String newColumn32;

		public String getNewColumn32() {
			return this.newColumn32;
		}

		public String newColumn33;

		public String getNewColumn33() {
			return this.newColumn33;
		}

		public String newColumn34;

		public String getNewColumn34() {
			return this.newColumn34;
		}

		public String newColumn35;

		public String getNewColumn35() {
			return this.newColumn35;
		}

		public String newColumn36;

		public String getNewColumn36() {
			return this.newColumn36;
		}

		public String newColumn37;

		public String getNewColumn37() {
			return this.newColumn37;
		}

		public String newColumn38;

		public String getNewColumn38() {
			return this.newColumn38;
		}

		public String newColumn39;

		public String getNewColumn39() {
			return this.newColumn39;
		}

		public String newColumn40;

		public String getNewColumn40() {
			return this.newColumn40;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ELAN_Randomize.length) {
					if (length < 1024
							&& commonByteArray_ELAN_Randomize.length == 0) {
						commonByteArray_ELAN_Randomize = new byte[1024];
					} else {
						commonByteArray_ELAN_Randomize = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ELAN_Randomize, 0, length);
				strReturn = new String(commonByteArray_ELAN_Randomize, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Randomize) {

				try {

					int length = 0;

					this.rowNumber = readInteger(dis);

					this.newColumn1 = readString(dis);

					this.newColumn2 = readString(dis);

					this.newColumn3 = readString(dis);

					this.newColumn4 = readString(dis);

					this.newColumn5 = readString(dis);

					this.newColumn6 = readString(dis);

					this.newColumn7 = readString(dis);

					this.newColumn8 = readString(dis);

					this.newColumn9 = readString(dis);

					this.newColumn10 = readString(dis);

					this.newColumn11 = readString(dis);

					this.newColumn12 = readString(dis);

					this.newColumn13 = readString(dis);

					this.newColumn14 = readString(dis);

					this.newColumn15 = readString(dis);

					this.newColumn16 = readString(dis);

					this.newColumn17 = readString(dis);

					this.newColumn18 = readString(dis);

					this.newColumn19 = readString(dis);

					this.newColumn20 = readString(dis);

					this.newColumn21 = readString(dis);

					this.newColumn22 = readString(dis);

					this.newColumn23 = readString(dis);

					this.newColumn24 = readString(dis);

					this.newColumn25 = readString(dis);

					this.newColumn26 = readString(dis);

					this.newColumn27 = readString(dis);

					this.newColumn28 = readString(dis);

					this.newColumn29 = readString(dis);

					this.newColumn30 = readString(dis);

					this.newColumn31 = readString(dis);

					this.newColumn32 = readString(dis);

					this.newColumn33 = readString(dis);

					this.newColumn34 = readString(dis);

					this.newColumn35 = readString(dis);

					this.newColumn36 = readString(dis);

					this.newColumn37 = readString(dis);

					this.newColumn38 = readString(dis);

					this.newColumn39 = readString(dis);

					this.newColumn40 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.rowNumber, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.newColumn2, dos);

				// String

				writeString(this.newColumn3, dos);

				// String

				writeString(this.newColumn4, dos);

				// String

				writeString(this.newColumn5, dos);

				// String

				writeString(this.newColumn6, dos);

				// String

				writeString(this.newColumn7, dos);

				// String

				writeString(this.newColumn8, dos);

				// String

				writeString(this.newColumn9, dos);

				// String

				writeString(this.newColumn10, dos);

				// String

				writeString(this.newColumn11, dos);

				// String

				writeString(this.newColumn12, dos);

				// String

				writeString(this.newColumn13, dos);

				// String

				writeString(this.newColumn14, dos);

				// String

				writeString(this.newColumn15, dos);

				// String

				writeString(this.newColumn16, dos);

				// String

				writeString(this.newColumn17, dos);

				// String

				writeString(this.newColumn18, dos);

				// String

				writeString(this.newColumn19, dos);

				// String

				writeString(this.newColumn20, dos);

				// String

				writeString(this.newColumn21, dos);

				// String

				writeString(this.newColumn22, dos);

				// String

				writeString(this.newColumn23, dos);

				// String

				writeString(this.newColumn24, dos);

				// String

				writeString(this.newColumn25, dos);

				// String

				writeString(this.newColumn26, dos);

				// String

				writeString(this.newColumn27, dos);

				// String

				writeString(this.newColumn28, dos);

				// String

				writeString(this.newColumn29, dos);

				// String

				writeString(this.newColumn30, dos);

				// String

				writeString(this.newColumn31, dos);

				// String

				writeString(this.newColumn32, dos);

				// String

				writeString(this.newColumn33, dos);

				// String

				writeString(this.newColumn34, dos);

				// String

				writeString(this.newColumn35, dos);

				// String

				writeString(this.newColumn36, dos);

				// String

				writeString(this.newColumn37, dos);

				// String

				writeString(this.newColumn38, dos);

				// String

				writeString(this.newColumn39, dos);

				// String

				writeString(this.newColumn40, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rowNumber=" + String.valueOf(rowNumber));
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + newColumn2);
			sb.append(",newColumn3=" + newColumn3);
			sb.append(",newColumn4=" + newColumn4);
			sb.append(",newColumn5=" + newColumn5);
			sb.append(",newColumn6=" + newColumn6);
			sb.append(",newColumn7=" + newColumn7);
			sb.append(",newColumn8=" + newColumn8);
			sb.append(",newColumn9=" + newColumn9);
			sb.append(",newColumn10=" + newColumn10);
			sb.append(",newColumn11=" + newColumn11);
			sb.append(",newColumn12=" + newColumn12);
			sb.append(",newColumn13=" + newColumn13);
			sb.append(",newColumn14=" + newColumn14);
			sb.append(",newColumn15=" + newColumn15);
			sb.append(",newColumn16=" + newColumn16);
			sb.append(",newColumn17=" + newColumn17);
			sb.append(",newColumn18=" + newColumn18);
			sb.append(",newColumn19=" + newColumn19);
			sb.append(",newColumn20=" + newColumn20);
			sb.append(",newColumn21=" + newColumn21);
			sb.append(",newColumn22=" + newColumn22);
			sb.append(",newColumn23=" + newColumn23);
			sb.append(",newColumn24=" + newColumn24);
			sb.append(",newColumn25=" + newColumn25);
			sb.append(",newColumn26=" + newColumn26);
			sb.append(",newColumn27=" + newColumn27);
			sb.append(",newColumn28=" + newColumn28);
			sb.append(",newColumn29=" + newColumn29);
			sb.append(",newColumn30=" + newColumn30);
			sb.append(",newColumn31=" + newColumn31);
			sb.append(",newColumn32=" + newColumn32);
			sb.append(",newColumn33=" + newColumn33);
			sb.append(",newColumn34=" + newColumn34);
			sb.append(",newColumn35=" + newColumn35);
			sb.append(",newColumn36=" + newColumn36);
			sb.append(",newColumn37=" + newColumn37);
			sb.append(",newColumn38=" + newColumn38);
			sb.append(",newColumn39=" + newColumn39);
			sb.append(",newColumn40=" + newColumn40);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(numberedRowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rowStruct implements
			routines.system.IPersistableRow<rowStruct> {
		final static byte[] commonByteArrayLock_ELAN_Randomize = new byte[0];
		static byte[] commonByteArray_ELAN_Randomize = new byte[0];

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String newColumn2;

		public String getNewColumn2() {
			return this.newColumn2;
		}

		public String newColumn3;

		public String getNewColumn3() {
			return this.newColumn3;
		}

		public String newColumn4;

		public String getNewColumn4() {
			return this.newColumn4;
		}

		public String newColumn5;

		public String getNewColumn5() {
			return this.newColumn5;
		}

		public String newColumn6;

		public String getNewColumn6() {
			return this.newColumn6;
		}

		public String newColumn7;

		public String getNewColumn7() {
			return this.newColumn7;
		}

		public String newColumn8;

		public String getNewColumn8() {
			return this.newColumn8;
		}

		public String newColumn9;

		public String getNewColumn9() {
			return this.newColumn9;
		}

		public String newColumn10;

		public String getNewColumn10() {
			return this.newColumn10;
		}

		public String newColumn11;

		public String getNewColumn11() {
			return this.newColumn11;
		}

		public String newColumn12;

		public String getNewColumn12() {
			return this.newColumn12;
		}

		public String newColumn13;

		public String getNewColumn13() {
			return this.newColumn13;
		}

		public String newColumn14;

		public String getNewColumn14() {
			return this.newColumn14;
		}

		public String newColumn15;

		public String getNewColumn15() {
			return this.newColumn15;
		}

		public String newColumn16;

		public String getNewColumn16() {
			return this.newColumn16;
		}

		public String newColumn17;

		public String getNewColumn17() {
			return this.newColumn17;
		}

		public String newColumn18;

		public String getNewColumn18() {
			return this.newColumn18;
		}

		public String newColumn19;

		public String getNewColumn19() {
			return this.newColumn19;
		}

		public String newColumn20;

		public String getNewColumn20() {
			return this.newColumn20;
		}

		public String newColumn21;

		public String getNewColumn21() {
			return this.newColumn21;
		}

		public String newColumn22;

		public String getNewColumn22() {
			return this.newColumn22;
		}

		public String newColumn23;

		public String getNewColumn23() {
			return this.newColumn23;
		}

		public String newColumn24;

		public String getNewColumn24() {
			return this.newColumn24;
		}

		public String newColumn25;

		public String getNewColumn25() {
			return this.newColumn25;
		}

		public String newColumn26;

		public String getNewColumn26() {
			return this.newColumn26;
		}

		public String newColumn27;

		public String getNewColumn27() {
			return this.newColumn27;
		}

		public String newColumn28;

		public String getNewColumn28() {
			return this.newColumn28;
		}

		public String newColumn29;

		public String getNewColumn29() {
			return this.newColumn29;
		}

		public String newColumn30;

		public String getNewColumn30() {
			return this.newColumn30;
		}

		public String newColumn31;

		public String getNewColumn31() {
			return this.newColumn31;
		}

		public String newColumn32;

		public String getNewColumn32() {
			return this.newColumn32;
		}

		public String newColumn33;

		public String getNewColumn33() {
			return this.newColumn33;
		}

		public String newColumn34;

		public String getNewColumn34() {
			return this.newColumn34;
		}

		public String newColumn35;

		public String getNewColumn35() {
			return this.newColumn35;
		}

		public String newColumn36;

		public String getNewColumn36() {
			return this.newColumn36;
		}

		public String newColumn37;

		public String getNewColumn37() {
			return this.newColumn37;
		}

		public String newColumn38;

		public String getNewColumn38() {
			return this.newColumn38;
		}

		public String newColumn39;

		public String getNewColumn39() {
			return this.newColumn39;
		}

		public String newColumn40;

		public String getNewColumn40() {
			return this.newColumn40;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ELAN_Randomize.length) {
					if (length < 1024
							&& commonByteArray_ELAN_Randomize.length == 0) {
						commonByteArray_ELAN_Randomize = new byte[1024];
					} else {
						commonByteArray_ELAN_Randomize = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ELAN_Randomize, 0, length);
				strReturn = new String(commonByteArray_ELAN_Randomize, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ELAN_Randomize) {

				try {

					int length = 0;

					this.newColumn1 = readString(dis);

					this.newColumn2 = readString(dis);

					this.newColumn3 = readString(dis);

					this.newColumn4 = readString(dis);

					this.newColumn5 = readString(dis);

					this.newColumn6 = readString(dis);

					this.newColumn7 = readString(dis);

					this.newColumn8 = readString(dis);

					this.newColumn9 = readString(dis);

					this.newColumn10 = readString(dis);

					this.newColumn11 = readString(dis);

					this.newColumn12 = readString(dis);

					this.newColumn13 = readString(dis);

					this.newColumn14 = readString(dis);

					this.newColumn15 = readString(dis);

					this.newColumn16 = readString(dis);

					this.newColumn17 = readString(dis);

					this.newColumn18 = readString(dis);

					this.newColumn19 = readString(dis);

					this.newColumn20 = readString(dis);

					this.newColumn21 = readString(dis);

					this.newColumn22 = readString(dis);

					this.newColumn23 = readString(dis);

					this.newColumn24 = readString(dis);

					this.newColumn25 = readString(dis);

					this.newColumn26 = readString(dis);

					this.newColumn27 = readString(dis);

					this.newColumn28 = readString(dis);

					this.newColumn29 = readString(dis);

					this.newColumn30 = readString(dis);

					this.newColumn31 = readString(dis);

					this.newColumn32 = readString(dis);

					this.newColumn33 = readString(dis);

					this.newColumn34 = readString(dis);

					this.newColumn35 = readString(dis);

					this.newColumn36 = readString(dis);

					this.newColumn37 = readString(dis);

					this.newColumn38 = readString(dis);

					this.newColumn39 = readString(dis);

					this.newColumn40 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.newColumn2, dos);

				// String

				writeString(this.newColumn3, dos);

				// String

				writeString(this.newColumn4, dos);

				// String

				writeString(this.newColumn5, dos);

				// String

				writeString(this.newColumn6, dos);

				// String

				writeString(this.newColumn7, dos);

				// String

				writeString(this.newColumn8, dos);

				// String

				writeString(this.newColumn9, dos);

				// String

				writeString(this.newColumn10, dos);

				// String

				writeString(this.newColumn11, dos);

				// String

				writeString(this.newColumn12, dos);

				// String

				writeString(this.newColumn13, dos);

				// String

				writeString(this.newColumn14, dos);

				// String

				writeString(this.newColumn15, dos);

				// String

				writeString(this.newColumn16, dos);

				// String

				writeString(this.newColumn17, dos);

				// String

				writeString(this.newColumn18, dos);

				// String

				writeString(this.newColumn19, dos);

				// String

				writeString(this.newColumn20, dos);

				// String

				writeString(this.newColumn21, dos);

				// String

				writeString(this.newColumn22, dos);

				// String

				writeString(this.newColumn23, dos);

				// String

				writeString(this.newColumn24, dos);

				// String

				writeString(this.newColumn25, dos);

				// String

				writeString(this.newColumn26, dos);

				// String

				writeString(this.newColumn27, dos);

				// String

				writeString(this.newColumn28, dos);

				// String

				writeString(this.newColumn29, dos);

				// String

				writeString(this.newColumn30, dos);

				// String

				writeString(this.newColumn31, dos);

				// String

				writeString(this.newColumn32, dos);

				// String

				writeString(this.newColumn33, dos);

				// String

				writeString(this.newColumn34, dos);

				// String

				writeString(this.newColumn35, dos);

				// String

				writeString(this.newColumn36, dos);

				// String

				writeString(this.newColumn37, dos);

				// String

				writeString(this.newColumn38, dos);

				// String

				writeString(this.newColumn39, dos);

				// String

				writeString(this.newColumn40, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + newColumn2);
			sb.append(",newColumn3=" + newColumn3);
			sb.append(",newColumn4=" + newColumn4);
			sb.append(",newColumn5=" + newColumn5);
			sb.append(",newColumn6=" + newColumn6);
			sb.append(",newColumn7=" + newColumn7);
			sb.append(",newColumn8=" + newColumn8);
			sb.append(",newColumn9=" + newColumn9);
			sb.append(",newColumn10=" + newColumn10);
			sb.append(",newColumn11=" + newColumn11);
			sb.append(",newColumn12=" + newColumn12);
			sb.append(",newColumn13=" + newColumn13);
			sb.append(",newColumn14=" + newColumn14);
			sb.append(",newColumn15=" + newColumn15);
			sb.append(",newColumn16=" + newColumn16);
			sb.append(",newColumn17=" + newColumn17);
			sb.append(",newColumn18=" + newColumn18);
			sb.append(",newColumn19=" + newColumn19);
			sb.append(",newColumn20=" + newColumn20);
			sb.append(",newColumn21=" + newColumn21);
			sb.append(",newColumn22=" + newColumn22);
			sb.append(",newColumn23=" + newColumn23);
			sb.append(",newColumn24=" + newColumn24);
			sb.append(",newColumn25=" + newColumn25);
			sb.append(",newColumn26=" + newColumn26);
			sb.append(",newColumn27=" + newColumn27);
			sb.append(",newColumn28=" + newColumn28);
			sb.append(",newColumn29=" + newColumn29);
			sb.append(",newColumn30=" + newColumn30);
			sb.append(",newColumn31=" + newColumn31);
			sb.append(",newColumn32=" + newColumn32);
			sb.append(",newColumn33=" + newColumn33);
			sb.append(",newColumn34=" + newColumn34);
			sb.append(",newColumn35=" + newColumn35);
			sb.append(",newColumn36=" + newColumn36);
			sb.append(",newColumn37=" + newColumn37);
			sb.append(",newColumn38=" + newColumn38);
			sb.append(",newColumn39=" + newColumn39);
			sb.append(",newColumn40=" + newColumn40);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				rowStruct row = new rowStruct();
				numberedRowStruct numberedRow = new numberedRowStruct();
				selectedRowStruct selectedRow = new selectedRowStruct();
				outputRowStruct outputRow = new outputRowStruct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.input
								.substring(0, context.input.lastIndexOf("."))
								.concat("-random.")
								.concat(context.input.substring(context.input
										.lastIndexOf(".") + 1))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				context.separator == null || context.separator.isEmpty() ? "\t"
						: context.separator/**
				 * End field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					int rowNumber;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				numberedRowStruct numberedRow_tmp = new numberedRowStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = context.input;
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								context.input, "UTF-8",
								context.separator == null
										|| context.separator.isEmpty() ? "\t"
										: context.separator, "\n", false, 0, 0,
								-1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row = new rowStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row.newColumn1 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row.newColumn2 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row.newColumn3 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row.newColumn4 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row.newColumn5 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row.newColumn6 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row.newColumn7 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row.newColumn8 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row.newColumn9 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row.newColumn10 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row.newColumn11 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row.newColumn12 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row.newColumn13 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row.newColumn14 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row.newColumn15 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row.newColumn16 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row.newColumn17 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row.newColumn18 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row.newColumn19 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row.newColumn20 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row.newColumn21 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							row.newColumn22 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row.newColumn23 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row.newColumn24 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							row.newColumn25 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 25;

							row.newColumn26 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 26;

							row.newColumn27 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 27;

							row.newColumn28 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 28;

							row.newColumn29 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 29;

							row.newColumn30 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 30;

							row.newColumn31 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 31;

							row.newColumn32 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 32;

							row.newColumn33 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 33;

							row.newColumn34 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 34;

							row.newColumn35 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 35;

							row.newColumn36 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 36;

							row.newColumn37 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 37;

							row.newColumn38 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 38;

							row.newColumn39 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 39;

							row.newColumn40 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row"
						if (row != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;
								Var.rowNumber = Numeric.sequence("rowNumber",
										1, 1);// ###############################
								// ###############################
								// # Output tables

								numberedRow = null;

								// # Output table : 'numberedRow'
								numberedRow_tmp.rowNumber = Var.rowNumber;
								numberedRow_tmp.newColumn1 = row.newColumn1;
								numberedRow_tmp.newColumn2 = row.newColumn2;
								numberedRow_tmp.newColumn3 = row.newColumn3;
								numberedRow_tmp.newColumn4 = row.newColumn4;
								numberedRow_tmp.newColumn5 = row.newColumn5;
								numberedRow_tmp.newColumn6 = row.newColumn6;
								numberedRow_tmp.newColumn7 = row.newColumn7;
								numberedRow_tmp.newColumn8 = row.newColumn8;
								numberedRow_tmp.newColumn9 = row.newColumn9;
								numberedRow_tmp.newColumn10 = row.newColumn10;
								numberedRow_tmp.newColumn11 = row.newColumn11;
								numberedRow_tmp.newColumn12 = row.newColumn12;
								numberedRow_tmp.newColumn13 = row.newColumn13;
								numberedRow_tmp.newColumn14 = row.newColumn14;
								numberedRow_tmp.newColumn15 = row.newColumn15;
								numberedRow_tmp.newColumn16 = row.newColumn16;
								numberedRow_tmp.newColumn17 = row.newColumn17;
								numberedRow_tmp.newColumn18 = row.newColumn18;
								numberedRow_tmp.newColumn19 = row.newColumn19;
								numberedRow_tmp.newColumn20 = row.newColumn20;
								numberedRow_tmp.newColumn21 = row.newColumn21;
								numberedRow_tmp.newColumn22 = row.newColumn22;
								numberedRow_tmp.newColumn23 = row.newColumn23;
								numberedRow_tmp.newColumn24 = row.newColumn24;
								numberedRow_tmp.newColumn25 = row.newColumn25;
								numberedRow_tmp.newColumn26 = row.newColumn26;
								numberedRow_tmp.newColumn27 = row.newColumn27;
								numberedRow_tmp.newColumn28 = row.newColumn28;
								numberedRow_tmp.newColumn29 = row.newColumn29;
								numberedRow_tmp.newColumn30 = row.newColumn30;
								numberedRow_tmp.newColumn31 = row.newColumn31;
								numberedRow_tmp.newColumn32 = row.newColumn32;
								numberedRow_tmp.newColumn33 = row.newColumn33;
								numberedRow_tmp.newColumn34 = row.newColumn34;
								numberedRow_tmp.newColumn35 = row.newColumn35;
								numberedRow_tmp.newColumn36 = row.newColumn36;
								numberedRow_tmp.newColumn37 = row.newColumn37;
								numberedRow_tmp.newColumn38 = row.newColumn38;
								numberedRow_tmp.newColumn39 = row.newColumn39;
								numberedRow_tmp.newColumn40 = row.newColumn40;
								numberedRow = numberedRow_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "numberedRow"
							if (numberedRow != null) {

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								selectedRow = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
										"&&");
								ope_tFilterRow_1
										.matches(
												(((ArrayList<Integer>) globalMap
														.get("randoms"))
														.contains(numberedRow.rowNumber)),
												"advanced condition failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (selectedRow == null) {
										selectedRow = new selectedRowStruct();
									}
									selectedRow.rowNumber = numberedRow.rowNumber;
									selectedRow.newColumn1 = numberedRow.newColumn1;
									selectedRow.newColumn2 = numberedRow.newColumn2;
									selectedRow.newColumn3 = numberedRow.newColumn3;
									selectedRow.newColumn4 = numberedRow.newColumn4;
									selectedRow.newColumn5 = numberedRow.newColumn5;
									selectedRow.newColumn6 = numberedRow.newColumn6;
									selectedRow.newColumn7 = numberedRow.newColumn7;
									selectedRow.newColumn8 = numberedRow.newColumn8;
									selectedRow.newColumn9 = numberedRow.newColumn9;
									selectedRow.newColumn10 = numberedRow.newColumn10;
									selectedRow.newColumn11 = numberedRow.newColumn11;
									selectedRow.newColumn12 = numberedRow.newColumn12;
									selectedRow.newColumn13 = numberedRow.newColumn13;
									selectedRow.newColumn14 = numberedRow.newColumn14;
									selectedRow.newColumn15 = numberedRow.newColumn15;
									selectedRow.newColumn16 = numberedRow.newColumn16;
									selectedRow.newColumn17 = numberedRow.newColumn17;
									selectedRow.newColumn18 = numberedRow.newColumn18;
									selectedRow.newColumn19 = numberedRow.newColumn19;
									selectedRow.newColumn20 = numberedRow.newColumn20;
									selectedRow.newColumn21 = numberedRow.newColumn21;
									selectedRow.newColumn22 = numberedRow.newColumn22;
									selectedRow.newColumn23 = numberedRow.newColumn23;
									selectedRow.newColumn24 = numberedRow.newColumn24;
									selectedRow.newColumn25 = numberedRow.newColumn25;
									selectedRow.newColumn26 = numberedRow.newColumn26;
									selectedRow.newColumn27 = numberedRow.newColumn27;
									selectedRow.newColumn28 = numberedRow.newColumn28;
									selectedRow.newColumn29 = numberedRow.newColumn29;
									selectedRow.newColumn30 = numberedRow.newColumn30;
									selectedRow.newColumn31 = numberedRow.newColumn31;
									selectedRow.newColumn32 = numberedRow.newColumn32;
									selectedRow.newColumn33 = numberedRow.newColumn33;
									selectedRow.newColumn34 = numberedRow.newColumn34;
									selectedRow.newColumn35 = numberedRow.newColumn35;
									selectedRow.newColumn36 = numberedRow.newColumn36;
									selectedRow.newColumn37 = numberedRow.newColumn37;
									selectedRow.newColumn38 = numberedRow.newColumn38;
									selectedRow.newColumn39 = numberedRow.newColumn39;
									selectedRow.newColumn40 = numberedRow.newColumn40;
									nb_line_ok_tFilterRow_1++;
								} else {
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */
								// Start of branch "selectedRow"
								if (selectedRow != null) {

									/**
									 * [tJavaRow_1 main ] start
									 */

									currentComponent = "tJavaRow_1";

									System.out
											.println("Row number "
													.concat(String
															.valueOf(selectedRow.rowNumber))
													.concat(" selected"));

									outputRow.rowNumber = selectedRow.rowNumber;
									outputRow.newColumn1 = selectedRow.newColumn1;
									outputRow.newColumn2 = selectedRow.newColumn2;
									outputRow.newColumn3 = selectedRow.newColumn3;
									outputRow.newColumn4 = selectedRow.newColumn4;
									outputRow.newColumn5 = selectedRow.newColumn5;
									outputRow.newColumn6 = selectedRow.newColumn6;
									outputRow.newColumn7 = selectedRow.newColumn7;
									outputRow.newColumn8 = selectedRow.newColumn8;
									outputRow.newColumn9 = selectedRow.newColumn9;
									outputRow.newColumn10 = selectedRow.newColumn10;
									outputRow.newColumn11 = selectedRow.newColumn11;
									outputRow.newColumn12 = selectedRow.newColumn12;
									outputRow.newColumn13 = selectedRow.newColumn13;
									outputRow.newColumn14 = selectedRow.newColumn14;
									outputRow.newColumn15 = selectedRow.newColumn15;
									outputRow.newColumn16 = selectedRow.newColumn16;
									outputRow.newColumn17 = selectedRow.newColumn17;
									outputRow.newColumn18 = selectedRow.newColumn18;
									outputRow.newColumn19 = selectedRow.newColumn19;
									outputRow.newColumn20 = selectedRow.newColumn20;
									outputRow.newColumn21 = selectedRow.newColumn21;
									outputRow.newColumn22 = selectedRow.newColumn22;
									outputRow.newColumn23 = selectedRow.newColumn23;
									outputRow.newColumn24 = selectedRow.newColumn24;
									outputRow.newColumn25 = selectedRow.newColumn25;
									outputRow.newColumn26 = selectedRow.newColumn26;
									outputRow.newColumn27 = selectedRow.newColumn27;
									outputRow.newColumn28 = selectedRow.newColumn28;
									outputRow.newColumn29 = selectedRow.newColumn29;
									outputRow.newColumn30 = selectedRow.newColumn30;
									outputRow.newColumn31 = selectedRow.newColumn31;
									outputRow.newColumn32 = selectedRow.newColumn32;
									outputRow.newColumn33 = selectedRow.newColumn33;
									outputRow.newColumn34 = selectedRow.newColumn34;
									outputRow.newColumn35 = selectedRow.newColumn35;
									outputRow.newColumn36 = selectedRow.newColumn36;
									outputRow.newColumn37 = selectedRow.newColumn37;
									outputRow.newColumn38 = selectedRow.newColumn38;
									outputRow.newColumn39 = selectedRow.newColumn39;
									outputRow.newColumn40 = selectedRow.newColumn40;

									nb_line_tJavaRow_1++;

									tos_count_tJavaRow_1++;

									/**
									 * [tJavaRow_1 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 main ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
									if (outputRow.newColumn1 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn1);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn2 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn2);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn3 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn3);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn4 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn4);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn5 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn5);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn6 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn6);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn7 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn7);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn8 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn8);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn9 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn9);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn10 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn10);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn11 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn11);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn12 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn12);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn13 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn13);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn14 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn14);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn15 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn15);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn16 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn16);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn17 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn17);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn18 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn18);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn19 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn19);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn20 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn20);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn21 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn21);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn22 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn22);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn23 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn23);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn24 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn24);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn25 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn25);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn26 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn26);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn27 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn27);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn28 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn28);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn29 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn29);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn30 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn30);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn31 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn31);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn32 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn32);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn33 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn33);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn34 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn34);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn35 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn35);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn36 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn36);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn37 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn37);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn38 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn38);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn39 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn39);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (outputRow.newColumn40 != null) {
										sb_tFileOutputDelimited_1
												.append(outputRow.newColumn40);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

									nb_line_tFileOutputDelimited_1++;
									resourceMap.put(
											"nb_line_tFileOutputDelimited_1",
											nb_line_tFileOutputDelimited_1);

									outtFileOutputDelimited_1
											.write(sb_tFileOutputDelimited_1
													.toString());

									tos_count_tFileOutputDelimited_1++;

									/**
									 * [tFileOutputDelimited_1 main ] stop
									 */

								} // End of branch "selectedRow"

							} // End of branch "numberedRow"

						} // End of branch "row"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (context.input) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				System.out.println("Done.");

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Randomize RandomizeClass = new Randomize();

		int exitCode = RandomizeClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Randomize.class.getClassLoader()
					.getResourceAsStream(
							"elan/randomize_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.input = (String) context.getProperty("input");
			try {
				context.number = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("number"));
			} catch (NumberFormatException e) {
				context.number = null;
			}
			context.separator = (String) context.getProperty("separator");
			context.header = (String) context.getProperty("header");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("input")) {
				context.input = (String) parentContextMap.get("input");
			}
			if (parentContextMap.containsKey("number")) {
				context.number = (Integer) parentContextMap.get("number");
			}
			if (parentContextMap.containsKey("separator")) {
				context.separator = (String) parentContextMap.get("separator");
			}
			if (parentContextMap.containsKey("header")) {
				context.header = (String) parentContextMap.get("header");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_2) {
			globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

			e_tJava_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Randomize");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 140728 characters generated by Talend Open Studio for Data Integration on the
 * October 16, 2018 5:51:28 PM CEST
 ************************************************************************************************/
